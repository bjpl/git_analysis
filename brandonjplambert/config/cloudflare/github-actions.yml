# GitHub Actions workflow for Cloudflare Pages deployment
# Place this file in .github/workflows/cloudflare-pages.yml

name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main      # Production deployment
      - develop   # Staging deployment
  pull_request:
    branches:
      - main      # Preview deployment for PRs

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          PRISMIC_REPO_NAME: ${{ secrets.PRISMIC_REPO_NAME }}
          PRISMIC_ACCESS_TOKEN: ${{ secrets.PRISMIC_ACCESS_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 1

  # Deploy to Cloudflare Pages
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Determine deployment environment
        id: deployment-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "project-name=project-workspace-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "project-name=project-workspace-staging" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "project-name=project-workspace-preview" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ steps.deployment-env.outputs.project-name }}
          directory: build
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'

  # Performance audit for production deployments
  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse audit
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: https://project-workspace-prod.pages.dev

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security headers check
        run: |
          curl -s "https://securityheaders.com/?q=https://project-workspace-prod.pages.dev&hide=on&followRedirects=on" | \
          grep -o 'class="score-[A-F]' | head -1 | grep -o '[A-F]' || echo "Failed to get security score"

      - name: SSL Labs test
        run: |
          curl -s "https://api.ssllabs.com/api/v3/analyze?host=project-workspace-prod.pages.dev" | \
          jq '.endpoints[0].grade' || echo "SSL test not available"

# Lighthouse CI configuration (optional)
# Create lighthouserc.js in project root:
# module.exports = {
#   ci: {
#     collect: {
#       url: ['https://project-workspace-prod.pages.dev'],
#       startServerCommand: 'npm run preview',
#       startServerReadyPattern: 'Local:',
#       startServerReadyTimeout: 120000
#     },
#     assert: {
#       assertions: {
#         'categories:performance': ['warn', {minScore: 0.9}],
#         'categories:accessibility': ['error', {minScore: 0.95}],
#         'categories:best-practices': ['error', {minScore: 0.95}],
#         'categories:seo': ['error', {minScore: 0.95}]
#       }
#     },
#     upload: {
#       target: 'temporary-public-storage'
#     }
#   }
# };