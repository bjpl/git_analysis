[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adaptive-learning-system"
version = "1.0.0"
description = "Intelligent platform for learning algorithms and data structures"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Development Team", email = "team@adaptivelearning.dev"}
]
maintainers = [
    {name = "Development Team", email = "team@adaptivelearning.dev"}
]
keywords = [
    "education",
    "learning", 
    "algorithms",
    "data-structures",
    "ai",
    "adaptive",
    "personalized"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Students", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Environment :: Console",
    "Natural Language :: English",
    "Typing :: Typed"
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0", 
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0"
]
# dynamic = ["version"]  # Commented out - version is specified statically above

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0", 
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "jupyterlab>=4.0.0",
    "ipython>=8.0.0"
]
ml = [
    "torch>=2.0.0",
    "transformers>=4.30.0", 
    "sentence-transformers>=2.2.0",
    "openai>=1.0.0",
    "langchain>=0.1.0",
    "faiss-cpu>=1.7.0"
]
performance = [
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "cython>=3.0.0",
    "numba>=0.57.0", 
    "redis>=4.5.0",
    "celery>=5.3.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "tox>=4.0.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/adaptive-learning-system"
Documentation = "https://adaptive-learning-system.readthedocs.io/"
Repository = "https://github.com/yourusername/adaptive-learning-system.git"
"Bug Reports" = "https://github.com/yourusername/adaptive-learning-system/issues"
Changelog = "https://github.com/yourusername/adaptive-learning-system/blob/main/CHANGELOG.md"

[project.scripts]
adaptive-learning = "src.main:main"
als = "src.main:main" 
learn = "src.main:main"

[tool.setuptools]
packages = ["src", "src.commands", "src.models", "src.services", "src.persistence", "src.ui", "src.utils", "src.core", "src.persistence.repositories"]
py-modules = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json", "*.sql"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "seaborn.*", 
    "sklearn.*",
    "numpy.*",
    "pandas.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"] 
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "ml: Machine learning tests",
    "db: Database tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__pycache__/*",
    "*/migrations/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    ".tox",
    "migrations"
]
per-file-ignores = [
    "__init__.py:F401"
]

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101"]  # Skip assert_used test

# Ruff linter (alternative to flake8)
[tool.ruff]
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]
exclude = [
    ".git",
    ".mypy_cache", 
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations"
]
target-version = "py39"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.ruff.mccabe]
max-complexity = 10

# Pylint configuration  
[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments", 
    "too-many-instance-attributes",
    "too-many-locals"
]

[tool.pylint.format]
max-line-length = 100

# Tox configuration for testing multiple Python versions
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39, py310, py311, py312, lint, type
isolated_build = true

[testenv]
deps = 
    pytest
    pytest-cov
commands = pytest {posargs}

[testenv:lint]
deps =
    black
    flake8 
    isort
commands =
    black --check src tests
    flake8 src tests
    isort --check-only src tests

[testenv:type]
deps = mypy
commands = mypy src

[testenv:format] 
deps =
    black
    isort
commands =
    black src tests
    isort src tests
"""