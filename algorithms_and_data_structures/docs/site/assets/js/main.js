// Interactive Documentation Site JavaScript\n\n// Theme management\nclass ThemeManager {\n    constructor() {\n        this.currentTheme = localStorage.getItem('theme') || 'light';\n        this.init();\n    }\n\n    init() {\n        this.applyTheme(this.currentTheme);\n        this.createThemeToggle();\n    }\n\n    applyTheme(theme) {\n        document.documentElement.setAttribute('data-theme', theme);\n        localStorage.setItem('theme', theme);\n        this.currentTheme = theme;\n    }\n\n    toggle() {\n        const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n        this.applyTheme(newTheme);\n        this.updateToggleIcon();\n    }\n\n    createThemeToggle() {\n        const toggle = document.createElement('button');\n        toggle.className = 'theme-toggle';\n        toggle.setAttribute('aria-label', 'Toggle theme');\n        toggle.innerHTML = this.getToggleIcon();\n        toggle.addEventListener('click', () => this.toggle());\n        \n        document.body.appendChild(toggle);\n    }\n\n    getToggleIcon() {\n        return this.currentTheme === 'light' ? '🌙' : '☀️';\n    }\n\n    updateToggleIcon() {\n        const toggle = document.querySelector('.theme-toggle');\n        if (toggle) {\n            toggle.innerHTML = this.getToggleIcon();\n        }\n    }\n}\n\n// Search functionality\nclass SearchManager {\n    constructor() {\n        this.searchInput = document.getElementById('searchInput');\n        this.searchResults = document.getElementById('searchResults');\n        this.searchData = [];\n        this.init();\n    }\n\n    async init() {\n        if (this.searchInput && this.searchResults) {\n            await this.loadSearchData();\n            this.setupEventListeners();\n        }\n    }\n\n    async loadSearchData() {\n        try {\n            // In a real implementation, this would load from a search index\n            this.searchData = [\n                {\n                    title: 'Getting Started',\n                    url: '../USER_GUIDE.md',\n                    description: 'Learn how to install and use the platform',\n                    category: 'Guide'\n                },\n                {\n                    title: 'API Reference',\n                    url: 'api/index.html',\n                    description: 'Complete API documentation',\n                    category: 'API'\n                },\n                {\n                    title: 'Architecture Overview',\n                    url: '../ARCHITECTURE.md',\n                    description: 'System design and component architecture',\n                    category: 'Architecture'\n                },\n                {\n                    title: 'Arrays Module',\n                    url: 'api/modules.html#arrays',\n                    description: 'Array operations and algorithms',\n                    category: 'Module'\n                },\n                {\n                    title: 'Sorting Algorithms',\n                    url: 'examples/algorithms.html#sorting',\n                    description: 'Interactive sorting algorithm demonstrations',\n                    category: 'Example'\n                },\n                {\n                    title: 'Component Gallery',\n                    url: 'components/index.html',\n                    description: 'UI components and visualizations',\n                    category: 'Component'\n                }\n            ];\n        } catch (error) {\n            console.error('Failed to load search data:', error);\n        }\n    }\n\n    setupEventListeners() {\n        this.searchInput.addEventListener('input', (e) => {\n            this.handleSearch(e.target.value);\n        });\n\n        this.searchInput.addEventListener('focus', () => {\n            if (this.searchInput.value) {\n                this.showResults();\n            }\n        });\n\n        // Close search results when clicking outside\n        document.addEventListener('click', (e) => {\n            if (!e.target.closest('.search-container')) {\n                this.hideResults();\n            }\n        });\n\n        // Keyboard navigation for search results\n        this.searchInput.addEventListener('keydown', (e) => {\n            this.handleKeyNavigation(e);\n        });\n    }\n\n    handleSearch(query) {\n        if (query.length < 2) {\n            this.hideResults();\n            return;\n        }\n\n        const results = this.searchData.filter(item => \n            item.title.toLowerCase().includes(query.toLowerCase()) ||\n            item.description.toLowerCase().includes(query.toLowerCase()) ||\n            item.category.toLowerCase().includes(query.toLowerCase())\n        );\n\n        this.displayResults(results);\n    }\n\n    displayResults(results) {\n        this.searchResults.innerHTML = '';\n        \n        if (results.length === 0) {\n            this.searchResults.innerHTML = `\n                <div class=\"search-result-item\">\n                    <strong>No results found</strong>\n                </div>\n            `;\n        } else {\n            results.slice(0, 5).forEach(result => {\n                const item = document.createElement('div');\n                item.className = 'search-result-item';\n                item.innerHTML = `\n                    <div>\n                        <strong>${this.highlightMatch(result.title, this.searchInput.value)}</strong>\n                        <small style=\"color: var(--text-secondary); margin-left: 0.5rem;\">${result.category}</small>\n                    </div>\n                    <div style=\"font-size: 0.9rem; color: var(--text-secondary); margin-top: 0.25rem;\">\n                        ${this.highlightMatch(result.description, this.searchInput.value)}\n                    </div>\n                `;\n                \n                item.addEventListener('click', () => {\n                    window.location.href = result.url;\n                });\n                \n                this.searchResults.appendChild(item);\n            });\n        }\n        \n        this.showResults();\n    }\n\n    highlightMatch(text, query) {\n        if (!query) return text;\n        \n        const regex = new RegExp(`(${query})`, 'gi');\n        return text.replace(regex, '<mark style=\"background-color: var(--accent-color); color: white; padding: 0 2px;\">$1</mark>');\n    }\n\n    showResults() {\n        this.searchResults.style.display = 'block';\n    }\n\n    hideResults() {\n        this.searchResults.style.display = 'none';\n    }\n\n    handleKeyNavigation(e) {\n        const items = this.searchResults.querySelectorAll('.search-result-item');\n        if (items.length === 0) return;\n\n        let currentIndex = -1;\n        items.forEach((item, index) => {\n            if (item.classList.contains('selected')) {\n                currentIndex = index;\n                item.classList.remove('selected');\n            }\n        });\n\n        if (e.key === 'ArrowDown') {\n            e.preventDefault();\n            currentIndex = Math.min(currentIndex + 1, items.length - 1);\n        } else if (e.key === 'ArrowUp') {\n            e.preventDefault();\n            currentIndex = Math.max(currentIndex - 1, -1);\n        } else if (e.key === 'Enter' && currentIndex >= 0) {\n            e.preventDefault();\n            items[currentIndex].click();\n            return;\n        } else if (e.key === 'Escape') {\n            this.hideResults();\n            this.searchInput.blur();\n            return;\n        }\n\n        if (currentIndex >= 0) {\n            items[currentIndex].classList.add('selected');\n            items[currentIndex].scrollIntoView({ block: 'nearest' });\n        }\n    }\n}\n\n// Navigation enhancements\nclass NavigationManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupSmoothScrolling();\n        this.setupActiveNavigation();\n        this.setupMobileMenu();\n    }\n\n    setupSmoothScrolling() {\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n            anchor.addEventListener('click', function (e) {\n                e.preventDefault();\n                const target = document.querySelector(this.getAttribute('href'));\n                if (target) {\n                    target.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start'\n                    });\n                }\n            });\n        });\n    }\n\n    setupActiveNavigation() {\n        const navLinks = document.querySelectorAll('.nav-link');\n        const sections = document.querySelectorAll('section[id]');\n\n        const observerOptions = {\n            root: null,\n            rootMargin: '-20% 0px -75% 0px',\n            threshold: 0\n        };\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    navLinks.forEach(link => {\n                        link.classList.remove('active');\n                        if (link.getAttribute('href') === `#${entry.target.id}`) {\n                            link.classList.add('active');\n                        }\n                    });\n                }\n            });\n        }, observerOptions);\n\n        sections.forEach(section => {\n            observer.observe(section);\n        });\n    }\n\n    setupMobileMenu() {\n        // Add mobile menu functionality if needed\n        const navbar = document.querySelector('.navbar');\n        let lastScrollY = window.scrollY;\n\n        window.addEventListener('scroll', () => {\n            const currentScrollY = window.scrollY;\n            \n            if (currentScrollY > lastScrollY && currentScrollY > 100) {\n                navbar.style.transform = 'translateY(-100%)';\n            } else {\n                navbar.style.transform = 'translateY(0)';\n            }\n            \n            lastScrollY = currentScrollY;\n        });\n    }\n}\n\n// Card interactions\nclass CardManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupCardAnimations();\n        this.setupCardFiltering();\n    }\n\n    setupCardAnimations() {\n        const cards = document.querySelectorAll('.card');\n        \n        const observerOptions = {\n            root: null,\n            rootMargin: '0px 0px -100px 0px',\n            threshold: 0.1\n        };\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    entry.target.style.opacity = '1';\n                    entry.target.style.transform = 'translateY(0)';\n                }\n            });\n        }, observerOptions);\n\n        cards.forEach((card, index) => {\n            card.style.opacity = '0';\n            card.style.transform = 'translateY(50px)';\n            card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;\n            observer.observe(card);\n        });\n    }\n\n    setupCardFiltering() {\n        // Add filtering functionality if needed\n        const cards = document.querySelectorAll('.card');\n        \n        // Example: Add filter buttons\n        const categories = [...new Set(Array.from(cards).map(card => \n            card.getAttribute('data-category')\n        ))];\n        \n        // This could be expanded to create filter UI\n    }\n}\n\n// Performance monitoring\nclass PerformanceMonitor {\n    constructor() {\n        this.metrics = {\n            loadTime: 0,\n            interactionTime: 0,\n            searchTime: 0\n        };\n        this.init();\n    }\n\n    init() {\n        this.measureLoadTime();\n        this.measureInteractions();\n    }\n\n    measureLoadTime() {\n        window.addEventListener('load', () => {\n            const perfData = performance.getEntriesByType('navigation')[0];\n            this.metrics.loadTime = perfData.loadEventEnd - perfData.fetchStart;\n            \n            if (this.metrics.loadTime > 3000) {\n                console.warn('Page load time is slow:', this.metrics.loadTime + 'ms');\n            }\n        });\n    }\n\n    measureInteractions() {\n        const buttons = document.querySelectorAll('.btn, .nav-link, .card');\n        \n        buttons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const start = performance.now();\n                \n                requestAnimationFrame(() => {\n                    const end = performance.now();\n                    this.metrics.interactionTime = end - start;\n                    \n                    if (this.metrics.interactionTime > 16) {\n                        console.warn('Slow interaction detected:', this.metrics.interactionTime + 'ms');\n                    }\n                });\n            });\n        });\n    }\n\n    getMetrics() {\n        return this.metrics;\n    }\n}\n\n// Accessibility enhancements\nclass AccessibilityManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupKeyboardNavigation();\n        this.setupFocusManagement();\n        this.setupScreenReaderSupport();\n    }\n\n    setupKeyboardNavigation() {\n        // Enable keyboard navigation for interactive elements\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Tab') {\n                document.body.classList.add('keyboard-navigation');\n            }\n        });\n\n        document.addEventListener('mousedown', () => {\n            document.body.classList.remove('keyboard-navigation');\n        });\n    }\n\n    setupFocusManagement() {\n        // Improve focus visibility\n        const focusableElements = 'a, button, input, [tabindex]:not([tabindex=\"-1\"])';\n        const elements = document.querySelectorAll(focusableElements);\n        \n        elements.forEach(element => {\n            element.addEventListener('focus', function() {\n                this.setAttribute('data-focused', 'true');\n            });\n            \n            element.addEventListener('blur', function() {\n                this.removeAttribute('data-focused');\n            });\n        });\n    }\n\n    setupScreenReaderSupport() {\n        // Add ARIA labels where needed\n        const searchInput = document.getElementById('searchInput');\n        if (searchInput) {\n            searchInput.setAttribute('aria-describedby', 'search-help');\n            \n            const helpText = document.createElement('div');\n            helpText.id = 'search-help';\n            helpText.className = 'sr-only';\n            helpText.textContent = 'Type to search documentation. Use arrow keys to navigate results.';\n            searchInput.parentNode.appendChild(helpText);\n        }\n    }\n}\n\n// Initialize all managers when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Initialize all components\n    const themeManager = new ThemeManager();\n    const searchManager = new SearchManager();\n    const navigationManager = new NavigationManager();\n    const cardManager = new CardManager();\n    const performanceMonitor = new PerformanceMonitor();\n    const accessibilityManager = new AccessibilityManager();\n\n    // Make managers available globally for debugging\n    if (typeof window !== 'undefined') {\n        window.docsSite = {\n            theme: themeManager,\n            search: searchManager,\n            navigation: navigationManager,\n            cards: cardManager,\n            performance: performanceMonitor,\n            accessibility: accessibilityManager\n        };\n    }\n\n    // Add loading complete class\n    document.body.classList.add('docs-loaded');\n    \n    console.log('📚 Interactive documentation site loaded successfully!');\n});\n\n// Service Worker registration for offline support\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/sw.js')\n            .then(registration => {\n                console.log('SW registered: ', registration);\n            })\n            .catch(registrationError => {\n                console.log('SW registration failed: ', registrationError);\n            });\n    });\n}\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = {\n        ThemeManager,\n        SearchManager,\n        NavigationManager,\n        CardManager,\n        PerformanceMonitor,\n        AccessibilityManager\n    };\n}