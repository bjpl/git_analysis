[tool:pytest]
# Pytest configuration for CLI application testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version requirements
minversion = 6.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    --maxfail=3

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    performance: marks tests as performance tests
    database: marks tests that require database
    async_test: marks tests that test async functionality
    ui: marks tests for UI components
    formatter: marks tests for formatting functionality
    terminal: marks tests for terminal compatibility
    cloud: marks tests for cloud integration
    mcp: marks tests for MCP tool integration
    cross_platform: marks tests that verify cross-platform compatibility
    windows: marks tests specific to Windows
    linux: marks tests specific to Linux
    macos: marks tests specific to macOS
    ssh: marks tests for SSH compatibility
    ci: marks tests for CI/CD environments

# Asyncio configuration
asyncio_mode = auto

# Logging configuration during tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture configuration
log_capture = true
log_level = DEBUG

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::ResourceWarning

# Terminal output configuration
console_output_style = progress

# Timeout configuration (requires pytest-timeout)
timeout = 300
timeout_method = thread

# Parallel execution configuration (requires pytest-xdist)
# Uncomment to enable parallel test execution:
# addopts = -n auto

# Coverage configuration
# Additional coverage options can be set in .coveragerc