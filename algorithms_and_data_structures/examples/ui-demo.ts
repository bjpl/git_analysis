/**\n * Interactive UI Demo Script\n * Comprehensive demonstration of CLI UI features and components\n */\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport Table from 'cli-table3';\n\ninterface DemoSection {\n    name: string;\n    description: string;\n    demo: () => Promise<void>;\n}\n\nclass UIDemo {\n    private sections: DemoSection[];\n    private isRunning: boolean = true;\n\n    constructor() {\n        this.sections = [\n            {\n                name: 'Color and Styling Demo',\n                description: 'Demonstrate color themes and text styling',\n                demo: this.colorDemo.bind(this)\n            },\n            {\n                name: 'Menu System Demo',\n                description: 'Interactive menu navigation and selection',\n                demo: this.menuDemo.bind(this)\n            },\n            {\n                name: 'Table Rendering Demo',\n                description: 'Dynamic table creation and formatting',\n                demo: this.tableDemo.bind(this)\n            },\n            {\n                name: 'Progress Indicators Demo',\n                description: 'Progress bars and loading animations',\n                demo: this.progressDemo.bind(this)\n            },\n            {\n                name: 'Form Interaction Demo',\n                description: 'Input validation and form handling',\n                demo: this.formDemo.bind(this)\n            },\n            {\n                name: 'Error Handling Demo',\n                description: 'Error display and recovery mechanisms',\n                demo: this.errorDemo.bind(this)\n            },\n            {\n                name: 'Theme Switching Demo',\n                description: 'Dynamic theme and accessibility features',\n                demo: this.themeDemo.bind(this)\n            },\n            {\n                name: 'Performance Monitoring Demo',\n                description: 'Response time and performance metrics',\n                demo: this.performanceDemo.bind(this)\n            }\n        ];\n    }\n\n    public async start(): Promise<void> {\n        this.displayWelcome();\n        \n        while (this.isRunning) {\n            try {\n                const section = await this.selectSection();\n                if (section) {\n                    await this.runSection(section);\n                } else {\n                    this.isRunning = false;\n                }\n            } catch (error) {\n                console.error(chalk.red('Demo error:'), error.message);\n                await this.waitForUser();\n            }\n        }\n        \n        this.displayGoodbye();\n    }\n\n    private displayWelcome(): void {\n        console.clear();\n        console.log(chalk.cyan.bold('\\nüé® Interactive UI Demo Suite'));\n        console.log(chalk.gray('‚ïê'.repeat(50)));\n        console.log(chalk.white('\\nWelcome to the comprehensive UI demonstration!'));\n        console.log(chalk.gray('This demo showcases various CLI UI components and features.\\n'));\n    }\n\n    private async selectSection(): Promise<DemoSection | null> {\n        const choices = [\n            ...this.sections.map(section => ({\n                name: `${chalk.cyan('‚ñ∂')} ${section.name} - ${chalk.gray(section.description)}`,\n                value: section\n            })),\n            {\n                name: `${chalk.red('‚úï')} Exit Demo`,\n                value: null\n            }\n        ];\n\n        const { selectedSection } = await inquirer.prompt([\n            {\n                type: 'list',\n                name: 'selectedSection',\n                message: 'Select a demo section:',\n                choices,\n                pageSize: 10\n            }\n        ]);\n\n        return selectedSection;\n    }\n\n    private async runSection(section: DemoSection): Promise<void> {\n        console.clear();\n        console.log(chalk.blue.bold(`\\nüöÄ ${section.name}`));\n        console.log(chalk.gray('‚îÄ'.repeat(section.name.length + 4)));\n        console.log(chalk.white(section.description));\n        console.log();\n\n        await section.demo();\n        await this.waitForUser('Press Enter to return to main menu...');\n    }\n\n    private async colorDemo(): Promise<void> {\n        console.log(chalk.yellow('üé® Color and Styling Demonstration\\n'));\n\n        // Basic colors\n        console.log('Basic Colors:');\n        const colors = ['red', 'green', 'blue', 'yellow', 'magenta', 'cyan', 'white', 'gray'];\n        colors.forEach(color => {\n            console.log(chalk[color](`  ‚óè ${color.charAt(0).toUpperCase() + color.slice(1)}`));\n        });\n\n        console.log('\\nText Styles:');\n        console.log(chalk.bold('  Bold Text'));\n        console.log(chalk.italic('  Italic Text'));\n        console.log(chalk.underline('  Underlined Text'));\n        console.log(chalk.strikethrough('  Strikethrough Text'));\n        console.log(chalk.dim('  Dimmed Text'));\n\n        console.log('\\nCombined Styles:');\n        console.log(chalk.bold.red('  Bold Red Text'));\n        console.log(chalk.blue.underline('  Blue Underlined Text'));\n        console.log(chalk.green.italic('  Green Italic Text'));\n        console.log(chalk.bgYellow.black('  Black text on Yellow background'));\n\n        console.log('\\nSemantic Colors:');\n        console.log(chalk.green('  ‚úì Success message'));\n        console.log(chalk.red('  ‚úó Error message'));\n        console.log(chalk.yellow('  ‚ö† Warning message'));\n        console.log(chalk.blue('  ‚Ñπ Information message'));\n\n        console.log('\\nGradient Effect (simulated):');\n        const text = 'Gradient Text Effect';\n        const gradientColors = ['red', 'yellow', 'green', 'cyan', 'blue', 'magenta'];\n        let gradientText = '';\n        for (let i = 0; i < text.length; i++) {\n            const colorIndex = Math.floor((i / text.length) * gradientColors.length);\n            gradientText += chalk[gradientColors[colorIndex]](text[i]);\n        }\n        console.log(`  ${gradientText}`);\n    }\n\n    private async menuDemo(): Promise<void> {\n        console.log(chalk.yellow('üìã Menu System Demonstration\\n'));\n\n        const menuItems = [\n            { name: 'Arrays & Data Structures', icon: 'üìä', shortcut: '1' },\n            { name: 'Sorting Algorithms', icon: 'üîÑ', shortcut: '2' },\n            { name: 'Search Algorithms', icon: 'üîç', shortcut: '3' },\n            { name: 'Graph Algorithms', icon: 'üï∏Ô∏è', shortcut: '4' },\n            { name: 'Dynamic Programming', icon: '‚ö°', shortcut: '5' }\n        ];\n\n        console.log('Menu with Icons and Shortcuts:');\n        menuItems.forEach((item, index) => {\n            const isSelected = index === 1; // Simulate selection\n            const prefix = isSelected ? chalk.cyan('‚ñ∫') : ' ';\n            const shortcut = chalk.gray(`[${item.shortcut}]`);\n            const icon = item.icon;\n            const name = isSelected ? chalk.white.bold(item.name) : chalk.white(item.name);\n            \n            console.log(`${prefix} ${shortcut} ${icon} ${name}`);\n        });\n\n        console.log('\\nBreadcrumb Navigation:');\n        const breadcrumbs = ['Home', 'Data Structures', 'Arrays', 'Array Operations'];\n        const breadcrumbText = breadcrumbs.map((crumb, index) => {\n            if (index === breadcrumbs.length - 1) {\n                return chalk.white.bold(crumb);\n            } else {\n                return chalk.blue(crumb);\n            }\n        }).join(chalk.gray(' ‚Ä∫ '));\n        console.log(`  ${breadcrumbText}`);\n\n        console.log('\\nMenu with Status Indicators:');\n        const statusItems = [\n            { name: 'Basic Arrays', status: 'completed', score: 95 },\n            { name: 'Linked Lists', status: 'in-progress', score: 60 },\n            { name: 'Trees & Graphs', status: 'locked', score: 0 },\n            { name: 'Hash Tables', status: 'available', score: 0 }\n        ];\n\n        statusItems.forEach(item => {\n            let statusIcon, statusColor;\n            switch (item.status) {\n                case 'completed':\n                    statusIcon = '‚úì';\n                    statusColor = 'green';\n                    break;\n                case 'in-progress':\n                    statusIcon = '‚óê';\n                    statusColor = 'yellow';\n                    break;\n                case 'locked':\n                    statusIcon = 'üîí';\n                    statusColor = 'red';\n                    break;\n                default:\n                    statusIcon = '‚óã';\n                    statusColor = 'gray';\n            }\n\n            const status = chalk[statusColor](statusIcon);\n            const score = item.score > 0 ? chalk.gray(`(${item.score}%)`) : '';\n            console.log(`  ${status} ${item.name} ${score}`);\n        });\n    }\n\n    private async tableDemo(): Promise<void> {\n        console.log(chalk.yellow('üìä Table Rendering Demonstration\\n'));\n\n        // Basic table\n        console.log('Basic Data Table:');\n        const basicTable = new Table({\n            head: ['Algorithm', 'Time Complexity', 'Space Complexity', 'Stable'],\n            style: {\n                head: ['cyan'],\n                border: ['gray']\n            }\n        });\n\n        const algorithmData = [\n            ['Bubble Sort', 'O(n¬≤)', 'O(1)', 'Yes'],\n            ['Quick Sort', 'O(n log n)', 'O(log n)', 'No'],\n            ['Merge Sort', 'O(n log n)', 'O(n)', 'Yes'],\n            ['Heap Sort', 'O(n log n)', 'O(1)', 'No']\n        ];\n\n        algorithmData.forEach(row => basicTable.push(row));\n        console.log(basicTable.toString());\n\n        // Styled table with colors\n        console.log('\\nStyled Performance Table:');\n        const performanceTable = new Table({\n            head: ['Test Case', 'Result', 'Time (ms)', 'Memory (MB)'],\n            style: { head: ['blue'], border: ['gray'] }\n        });\n\n        const performanceData = [\n            ['Small Array (100)', chalk.green('‚úì PASS'), '1.2', '0.5'],\n            ['Medium Array (1K)', chalk.green('‚úì PASS'), '12.5', '2.1'],\n            ['Large Array (10K)', chalk.green('‚úì PASS'), '156.3', '15.7'],\n            ['Huge Array (100K)', chalk.red('‚úó TIMEOUT'), '> 5000', '89.2']\n        ];\n\n        performanceData.forEach(row => performanceTable.push(row));\n        console.log(performanceTable.toString());\n\n        // Compact table\n        console.log('\\nCompact Statistics Table:');\n        const statsTable = new Table({\n            head: ['Metric', 'Value'],\n            style: { head: ['magenta'], border: ['dim'] },\n            colWidths: [20, 15]\n        });\n\n        const statsData = [\n            ['Total Tests', chalk.blue('47')],\n            ['Passed', chalk.green('42')],\n            ['Failed', chalk.red('3')],\n            ['Skipped', chalk.yellow('2')],\n            ['Coverage', chalk.cyan('91.5%')],\n            ['Duration', chalk.gray('2.3s')]\n        ];\n\n        statsData.forEach(([metric, value]) => {\n            statsTable.push([metric, value]);\n        });\n        console.log(statsTable.toString());\n    }\n\n    private async progressDemo(): Promise<void> {\n        console.log(chalk.yellow('üìà Progress Indicators Demonstration\\n'));\n\n        console.log('Static Progress Bars:');\n        this.showProgressBar('Learning Progress', 75, 100);\n        this.showProgressBar('Test Completion', 42, 50);\n        this.showProgressBar('Memory Usage', 384, 512);\n        this.showProgressBar('Download', 0, 100);\n\n        console.log('\\nAnimated Progress Demo:');\n        console.log('Watch this progress bar animate...\\n');\n\n        for (let progress = 0; progress <= 100; progress += 5) {\n            process.stdout.write('\\r' + ' '.repeat(50)); // Clear line\n            process.stdout.write('\\r');\n            this.showProgressBarInline('Processing', progress, 100);\n            await new Promise(resolve => setTimeout(resolve, 200));\n        }\n\n        console.log('\\n\\nSpinner Animations:');\n        const spinners = {\n            dots: ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'],\n            line: ['|', '/', '-', '\\\\'],\n            bouncing: ['‚óê', '‚óì', '‚óë', '‚óí'],\n            clock: ['üïê', 'üïë', 'üïí', 'üïì', 'üïî', 'üïï']\n        };\n\n        for (const [name, frames] of Object.entries(spinners)) {\n            console.log(`\\n${name.charAt(0).toUpperCase() + name.slice(1)} Spinner:`);\n            \n            for (let i = 0; i < frames.length * 2; i++) {\n                const frame = frames[i % frames.length];\n                process.stdout.write(`\\r  ${chalk.cyan(frame)} Loading... `);\n                await new Promise(resolve => setTimeout(resolve, 150));\n            }\n            process.stdout.write(`\\r  ${chalk.green('‚úì')} Complete!   \\n`);\n        }\n    }\n\n    private showProgressBar(label: string, current: number, total: number): void {\n        const percentage = Math.round((current / total) * 100);\n        const barLength = 30;\n        const filledLength = Math.round((current / total) * barLength);\n        const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);\n        \n        let color: string;\n        if (percentage >= 80) color = 'green';\n        else if (percentage >= 60) color = 'yellow';\n        else if (percentage >= 40) color = 'blue';\n        else color = 'red';\n\n        console.log(`  ${label}: ${chalk[color](bar)} ${percentage}% (${current}/${total})`);\n    }\n\n    private showProgressBarInline(label: string, current: number, total: number): void {\n        const percentage = Math.round((current / total) * 100);\n        const barLength = 25;\n        const filledLength = Math.round((current / total) * barLength);\n        const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);\n        \n        const color = percentage >= 100 ? 'green' : 'cyan';\n        process.stdout.write(`${label}: ${chalk[color](bar)} ${percentage}%`);\n    }\n\n    private async formDemo(): Promise<void> {\n        console.log(chalk.yellow('üìù Form Interaction Demonstration\\n'));\n\n        console.log('Interactive Form Example:');\n        console.log(chalk.gray('(This demo shows form validation and input handling)\\n'));\n\n        try {\n            const answers = await inquirer.prompt([\n                {\n                    type: 'input',\n                    name: 'username',\n                    message: 'Enter your username:',\n                    validate: (input: string) => {\n                        if (input.length < 3) {\n                            return 'Username must be at least 3 characters long';\n                        }\n                        if (!/^[a-zA-Z0-9_]+$/.test(input)) {\n                            return 'Username can only contain letters, numbers, and underscores';\n                        }\n                        return true;\n                    }\n                },\n                {\n                    type: 'list',\n                    name: 'difficulty',\n                    message: 'Select your preferred difficulty level:',\n                    choices: [\n                        { name: 'üü¢ Beginner - Just starting out', value: 'beginner' },\n                        { name: 'üü° Intermediate - Some experience', value: 'intermediate' },\n                        { name: 'üî¥ Advanced - Expert level', value: 'advanced' }\n                    ]\n                },\n                {\n                    type: 'checkbox',\n                    name: 'interests',\n                    message: 'Select your areas of interest:',\n                    choices: [\n                        { name: 'Data Structures', checked: true },\n                        { name: 'Algorithms', checked: true },\n                        { name: 'System Design' },\n                        { name: 'Machine Learning' },\n                        { name: 'Web Development' },\n                        { name: 'Database Systems' }\n                    ]\n                },\n                {\n                    type: 'confirm',\n                    name: 'newsletter',\n                    message: 'Would you like to receive progress updates?',\n                    default: true\n                }\n            ]);\n\n            console.log('\\n' + chalk.green('‚úì Form submitted successfully!'));\n            console.log('\\nForm Data Summary:');\n            \n            const summaryTable = new Table({\n                style: { border: ['cyan'] },\n                colWidths: [20, 30]\n            });\n            \n            summaryTable.push(\n                ['Username', chalk.white(answers.username)],\n                ['Difficulty', chalk.white(answers.difficulty)],\n                ['Interests', chalk.white(answers.interests.join(', ') || 'None selected')],\n                ['Newsletter', chalk.white(answers.newsletter ? 'Yes' : 'No')]\n            );\n            \n            console.log(summaryTable.toString());\n            \n        } catch (error) {\n            console.log(chalk.red('\\n‚úó Form cancelled by user'));\n        }\n    }\n\n    private async errorDemo(): Promise<void> {\n        console.log(chalk.yellow('üö® Error Handling Demonstration\\n'));\n\n        const errorTypes = [\n            {\n                type: 'Validation Error',\n                icon: '‚ö†Ô∏è',\n                color: 'yellow',\n                message: 'Invalid input format. Please check your data.',\n                suggestion: 'Try using the format: name@example.com'\n            },\n            {\n                type: 'Network Error',\n                icon: 'üåê',\n                color: 'red',\n                message: 'Unable to connect to server. Please check your connection.',\n                suggestion: 'Retry in a few moments or check your network settings'\n            },\n            {\n                type: 'Permission Error',\n                icon: 'üîí',\n                color: 'red',\n                message: 'Access denied. You do not have permission to perform this action.',\n                suggestion: 'Contact your administrator or log in with appropriate credentials'\n            },\n            {\n                type: 'Timeout Error',\n                icon: '‚è±Ô∏è',\n                color: 'yellow',\n                message: 'Operation timed out. The request took too long to complete.',\n                suggestion: 'Try again or break down the operation into smaller parts'\n            },\n            {\n                type: 'System Error',\n                icon: 'üí•',\n                color: 'red',\n                message: 'An unexpected system error occurred.',\n                suggestion: 'Please report this issue with the error code: ERR_SYS_001'\n            }\n        ];\n\n        console.log('Error Message Examples:');\n        errorTypes.forEach((error, index) => {\n            console.log();\n            console.log(chalk[error.color].bold(`${error.icon} ${error.type}`));\n            console.log(chalk.white(`   ${error.message}`));\n            console.log(chalk.gray(`   üí° ${error.suggestion}`));\n            \n            if (index < errorTypes.length - 1) {\n                console.log(chalk.gray('   ' + '‚îÄ'.repeat(50)));\n            }\n        });\n\n        console.log('\\nError Recovery Demo:');\n        console.log(chalk.blue('Simulating error recovery process...\\n'));\n        \n        const recoverySteps = [\n            'Detecting error condition...',\n            'Analyzing error type...',\n            'Attempting automatic recovery...',\n            'Fallback to safe mode...',\n            'Recovery successful!'\n        ];\n        \n        for (const [index, step] of recoverySteps.entries()) {\n            const isLast = index === recoverySteps.length - 1;\n            const icon = isLast ? chalk.green('‚úì') : chalk.cyan('‚öôÔ∏è');\n            const color = isLast ? 'green' : 'white';\n            \n            console.log(`  ${icon} ${chalk[color](step)}`);\n            await new Promise(resolve => setTimeout(resolve, 800));\n        }\n    }\n\n    private async themeDemo(): Promise<void> {\n        console.log(chalk.yellow('üé® Theme Switching Demonstration\\n'));\n\n        const themes = {\n            default: {\n                name: 'Default Theme',\n                primary: 'cyan',\n                secondary: 'blue',\n                success: 'green',\n                warning: 'yellow',\n                error: 'red',\n                muted: 'gray'\n            },\n            dark: {\n                name: 'Dark Theme',\n                primary: 'white',\n                secondary: 'gray',\n                success: 'brightGreen',\n                warning: 'brightYellow',\n                error: 'brightRed',\n                muted: 'dim'\n            },\n            accessible: {\n                name: 'High Contrast Theme',\n                primary: 'white',\n                secondary: 'white',\n                success: 'white',\n                warning: 'white',\n                error: 'white',\n                muted: 'white'\n            }\n        };\n\n        for (const [themeKey, theme] of Object.entries(themes)) {\n            console.log(chalk.bold(`\\n${theme.name}:`));\n            console.log(chalk[theme.primary]('  Primary: Navigation and headers'));\n            console.log(chalk[theme.secondary]('  Secondary: Descriptions and details'));\n            console.log(chalk[theme.success]('  Success: ‚úì Completed operations'));\n            console.log(chalk[theme.warning]('  Warning: ‚ö† Attention needed'));\n            console.log(chalk[theme.error]('  Error: ‚úó Failed operations'));\n            console.log(chalk[theme.muted]('  Muted: Less important information'));\n        }\n\n        console.log('\\nAccessibility Features:');\n        console.log(chalk.white('‚Ä¢ High contrast mode for better visibility'));\n        console.log(chalk.white('‚Ä¢ Screen reader friendly labels'));\n        console.log(chalk.white('‚Ä¢ Keyboard navigation support'));\n        console.log(chalk.white('‚Ä¢ Reduced motion options'));\n        console.log(chalk.white('‚Ä¢ Font size adjustment'));\n        \n        console.log('\\nSample UI with Accessibility:');\n        console.log(chalk.white.bold('‚îå‚îÄ Menu Item 1 (ARIA: menu-item-1)'));\n        console.log(chalk.white.bold('‚îú‚îÄ Menu Item 2 (ARIA: menu-item-2) ‚Üê [SELECTED]'));\n        console.log(chalk.white.bold('‚îú‚îÄ Menu Item 3 (ARIA: menu-item-3)'));\n        console.log(chalk.white.bold('‚îî‚îÄ Help: Press H for help, ESC to go back'));\n    }\n\n    private async performanceDemo(): Promise<void> {\n        console.log(chalk.yellow('‚ö° Performance Monitoring Demonstration\\n'));\n\n        console.log('Simulating performance measurements...');\n        \n        // Simulate performance metrics\n        const metrics = {\n            renderTime: Math.random() * 50 + 10,\n            memoryUsage: Math.random() * 100 + 50,\n            responseTime: Math.random() * 200 + 50,\n            cacheHitRate: Math.random() * 40 + 60\n        };\n\n        console.log('\\nCurrent Performance Metrics:');\n        \n        const metricsTable = new Table({\n            head: ['Metric', 'Value', 'Status', 'Threshold'],\n            style: { head: ['blue'], border: ['gray'] }\n        });\n        \n        const performanceData = [\n            [\n                'Render Time',\n                `${metrics.renderTime.toFixed(1)}ms`,\n                metrics.renderTime < 100 ? chalk.green('‚úì Good') : chalk.yellow('‚ö† Slow'),\n                '< 100ms'\n            ],\n            [\n                'Memory Usage',\n                `${metrics.memoryUsage.toFixed(1)}MB`,\n                metrics.memoryUsage < 100 ? chalk.green('‚úì Good') : chalk.red('‚úó High'),\n                '< 100MB'\n            ],\n            [\n                'Response Time',\n                `${metrics.responseTime.toFixed(1)}ms`,\n                metrics.responseTime < 200 ? chalk.green('‚úì Fast') : chalk.yellow('‚ö† Slow'),\n                '< 200ms'\n            ],\n            [\n                'Cache Hit Rate',\n                `${metrics.cacheHitRate.toFixed(1)}%`,\n                metrics.cacheHitRate > 80 ? chalk.green('‚úì Good') : chalk.yellow('‚ö† Low'),\n                '> 80%'\n            ]\n        ];\n        \n        performanceData.forEach(row => metricsTable.push(row));\n        console.log(metricsTable.toString());\n\n        console.log('\\nPerformance Timeline:');\n        const timelineData = [\n            { time: '0ms', event: 'User input received', color: 'blue' },\n            { time: '5ms', event: 'Input validation', color: 'cyan' },\n            { time: '15ms', event: 'Data processing started', color: 'yellow' },\n            { time: '45ms', event: 'Render phase initiated', color: 'magenta' },\n            { time: '78ms', event: 'DOM updates completed', color: 'green' }\n        ];\n\n        timelineData.forEach(item => {\n            console.log(`  ${chalk.gray(item.time.padEnd(8))} ${chalk[item.color]('‚ñ∂')} ${item.event}`);\n        });\n\n        console.log('\\nReal-time Performance Monitor:');\n        console.log(chalk.gray('Monitoring system performance (5 seconds)...\\n'));\n        \n        for (let i = 0; i < 25; i++) {\n            const cpuUsage = Math.sin(i * 0.1) * 20 + 50 + Math.random() * 10;\n            const memUsage = Math.cos(i * 0.1) * 15 + 40 + Math.random() * 5;\n            \n            process.stdout.write('\\r' + ' '.repeat(80));\n            process.stdout.write('\\r');\n            \n            const cpuBar = this.createMiniProgressBar(cpuUsage, 100, 15);\n            const memBar = this.createMiniProgressBar(memUsage, 100, 15);\n            \n            process.stdout.write(`CPU: ${cpuBar} ${cpuUsage.toFixed(1)}% | RAM: ${memBar} ${memUsage.toFixed(1)}%`);\n            \n            await new Promise(resolve => setTimeout(resolve, 200));\n        }\n        \n        console.log('\\n\\n' + chalk.green('‚úì Performance monitoring complete'));\n    }\n\n    private createMiniProgressBar(value: number, max: number, length: number): string {\n        const percentage = value / max;\n        const filled = Math.round(percentage * length);\n        const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(length - filled);\n        \n        let color: string;\n        if (percentage > 0.8) color = 'red';\n        else if (percentage > 0.6) color = 'yellow';\n        else color = 'green';\n        \n        return chalk[color](bar);\n    }\n\n    private async waitForUser(message: string = 'Press Enter to continue...'): Promise<void> {\n        console.log();\n        await inquirer.prompt([{\n            type: 'input',\n            name: 'continue',\n            message: chalk.gray(message)\n        }]);\n    }\n\n    private displayGoodbye(): void {\n        console.clear();\n        console.log(chalk.green.bold('\\n‚úÖ Demo Complete!'));\n        console.log(chalk.gray('‚ïê'.repeat(30)));\n        console.log(chalk.white('Thank you for exploring the UI demo suite!'));\n        console.log(chalk.gray('\\nThis demo showcased:'));\n        console.log(chalk.white('‚Ä¢ Color themes and styling'));\n        console.log(chalk.white('‚Ä¢ Interactive menu systems'));\n        console.log(chalk.white('‚Ä¢ Dynamic table rendering'));\n        console.log(chalk.white('‚Ä¢ Progress indicators'));\n        console.log(chalk.white('‚Ä¢ Form handling'));\n        console.log(chalk.white('‚Ä¢ Error management'));\n        console.log(chalk.white('‚Ä¢ Theme switching'));\n        console.log(chalk.white('‚Ä¢ Performance monitoring'));\n        console.log(chalk.gray('\\nFeel free to run this demo again anytime!\\n'));\n    }\n}\n\n// Main execution\nif (require.main === module) {\n    const demo = new UIDemo();\n    demo.start().catch(error => {\n        console.error(chalk.red('\\nDemo failed:'), error.message);\n        process.exit(1);\n    });\n}\n\nexport default UIDemo;"