/**\n * Jest Test Setup\n * Global test configuration and utilities\n */\n\n// Mock console methods for testing\nglobal.console = {\n  ...console,\n  log: jest.fn(),\n  error: jest.fn(),\n  warn: jest.fn(),\n  info: jest.fn(),\n  debug: jest.fn()\n};\n\n// Mock performance API for Node.js environment\nif (typeof performance === 'undefined') {\n  global.performance = {\n    now: () => Date.now()\n  };\n}\n\n// Mock process.stdout for testing CLI output\nconst originalStdoutWrite = process.stdout.write;\nprocess.stdout.write = jest.fn(originalStdoutWrite);\n\n// Global test utilities\nglobal.testUtils = {\n  // Reset all mocks\n  resetMocks: () => {\n    jest.clearAllMocks();\n    console.log.mockClear();\n    console.error.mockClear();\n    console.warn.mockClear();\n    process.stdout.write.mockClear();\n  },\n  \n  // Create mock DOM elements for testing\n  createMockElement: (tag = 'div', props = {}) => {\n    return {\n      tagName: tag.toUpperCase(),\n      innerHTML: '',\n      textContent: '',\n      attributes: new Map(Object.entries(props)),\n      children: [],\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      setAttribute: jest.fn((key, value) => {\n        element.attributes.set(key, value);\n      }),\n      getAttribute: jest.fn((key) => {\n        return element.attributes.get(key);\n      })\n    };\n  },\n  \n  // Wait for async operations\n  waitFor: (ms = 0) => new Promise(resolve => setTimeout(resolve, ms)),\n  \n  // Generate test data\n  generateTestData: {\n    menuItems: (count = 5) => {\n      return Array.from({ length: count }, (_, i) => ({\n        id: `item-${i}`,\n        label: `Test Item ${i + 1}`,\n        description: `Description for test item ${i + 1}`,\n        icon: 'ðŸ§ª'\n      }));\n    },\n    \n    tableData: (rows = 10, columns = ['id', 'name', 'value']) => {\n      return Array.from({ length: rows }, (_, i) => {\n        const row = {};\n        columns.forEach(col => {\n          switch (col) {\n            case 'id':\n              row[col] = i;\n              break;\n            case 'name':\n              row[col] = `Item ${i}`;\n              break;\n            case 'value':\n              row[col] = Math.floor(Math.random() * 100);\n              break;\n            default:\n              row[col] = `${col}_${i}`;\n          }\n        });\n        return row;\n      });\n    },\n    \n    performanceMetrics: () => ({\n      renderTime: Math.random() * 100 + 10,\n      memoryUsage: Math.random() * 50 + 20,\n      responseTime: Math.random() * 200 + 50,\n      cacheHitRate: Math.random() * 40 + 60\n    })\n  }\n};\n\n// Setup and teardown\nbeforeEach(() => {\n  // Reset mocks before each test\n  global.testUtils.resetMocks();\n  \n  // Reset timers\n  jest.useFakeTimers();\n});\n\nafterEach(() => {\n  // Clean up after each test\n  jest.useRealTimers();\n  jest.restoreAllMocks();\n});\n\n// Global error handler for unhandled promises\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\n// Extend Jest matchers\nexpect.extend({\n  // Custom matcher for performance thresholds\n  toBeFasterThan(received, threshold) {\n    const pass = received < threshold;\n    return {\n      message: () => \n        `expected ${received}ms ${pass ? 'not ' : ''}to be faster than ${threshold}ms`,\n      pass\n    };\n  },\n  \n  // Custom matcher for memory usage\n  toUseMemoryWithin(received, min, max) {\n    const pass = received >= min && received <= max;\n    return {\n      message: () => \n        `expected memory usage ${received}MB ${pass ? 'not ' : ''}to be between ${min}MB and ${max}MB`,\n      pass\n    };\n  },\n  \n  // Custom matcher for UI components\n  toRenderCorrectly(received) {\n    const hasRendered = received && received.rendered === true;\n    const hasValidTime = received && typeof received.renderTime === 'number' && received.renderTime > 0;\n    const pass = hasRendered && hasValidTime;\n    \n    return {\n      message: () => \n        `expected component ${pass ? 'not ' : ''}to render correctly`,\n      pass\n    };\n  }\n});\n\n// Export test utilities for use in test files\nmodule.exports = {\n  testUtils: global.testUtils\n};"