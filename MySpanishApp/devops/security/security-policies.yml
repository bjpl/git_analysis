# Security Policies and Network Policies for SpanishMaster

# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: spanishmaster-psp
  namespace: spanishmaster
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Network Policy - Default Deny All
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: spanishmaster
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Network Policy - Allow SpanishMaster App Traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: spanishmaster-app-policy
  namespace: spanishmaster
spec:
  podSelector:
    matchLabels:
      app: spanishmaster
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: [] # Allow external traffic (Internet)
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53
---
# Network Policy - Database Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-policy
  namespace: spanishmaster
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: spanishmaster
    - podSelector:
        matchLabels:
          app: backup-job
    ports:
    - protocol: TCP
      port: 5432
---
# Network Policy - Redis Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-policy
  namespace: spanishmaster
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: spanishmaster
    ports:
    - protocol: TCP
      port: 6379
---
# Network Policy - Monitoring Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-policy
  namespace: spanishmaster
spec:
  podSelector:
    matchLabels:
      app: prometheus
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: grafana
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9100
---
# RBAC - Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spanishmaster-sa
  namespace: spanishmaster
  labels:
    app: spanishmaster
---
# RBAC - Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: spanishmaster
  name: spanishmaster-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
# RBAC - Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spanishmaster-rolebinding
  namespace: spanishmaster
subjects:
- kind: ServiceAccount
  name: spanishmaster-sa
  namespace: spanishmaster
roleRef:
  kind: Role
  name: spanishmaster-role
  apiGroup: rbac.authorization.k8s.io
---
# Security Context Constraints (OpenShift)
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: spanishmaster-scc
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: false
allowedCapabilities: []
defaultAddCapabilities: []
requiredDropCapabilities:
- KILL
- MKNOD
- SETUID
- SETGID
fsGroup:
  type: MustRunAs
  ranges:
  - min: 1
    max: 65535
runAsUser:
  type: MustRunAsNonRoot
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: MustRunAs
  ranges:
  - min: 1
    max: 65535
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
users:
- system:serviceaccount:spanishmaster:spanishmaster-sa
---
# OPA Gatekeeper Policies
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredsecuritycontext
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredSecurityContext
      validation:
        openAPIV3Schema:
          type: object
          properties:
            runAsNonRoot:
              type: boolean
            readOnlyRootFilesystem:
              type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredsecuritycontext
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := "Container must have read-only root filesystem"
        }
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredSecurityContext
metadata:
  name: must-run-as-nonroot
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
    namespaces: ["spanishmaster"]
  parameters:
    runAsNonRoot: true
    readOnlyRootFilesystem: false
---
# Falco Security Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-rules
  namespace: spanishmaster
data:
  spanishmaster_rules.yaml: |
    - rule: Unauthorized Process in SpanishMaster Container
      desc: Detect unauthorized processes in SpanishMaster containers
      condition: >
        spawned_process and container and
        container.image.repository contains "spanishmaster" and
        not proc.name in (python, java, node, sh, bash)
      output: >
        Unauthorized process spawned in SpanishMaster container
        (user=%user.name command=%proc.cmdline container_id=%container.id
        image=%container.image.repository)
      priority: WARNING
      tags: [container, process, spanishmaster]
    
    - rule: Sensitive File Access in SpanishMaster
      desc: Detect access to sensitive files in SpanishMaster
      condition: >
        open_read and container and
        container.image.repository contains "spanishmaster" and
        (fd.name contains "/etc/passwd" or
         fd.name contains "/etc/shadow" or
         fd.name contains "/.ssh/" or
         fd.name contains "/root/")
      output: >
        Sensitive file accessed in SpanishMaster container
        (user=%user.name file=%fd.name container_id=%container.id)
      priority: HIGH
      tags: [filesystem, spanishmaster, security]
    
    - rule: Network Connection from SpanishMaster
      desc: Monitor network connections from SpanishMaster
      condition: >
        inbound_outbound and container and
        container.image.repository contains "spanishmaster" and
        not fd.rip in (postgres_ips, redis_ips, monitoring_ips)
      output: >
        Unexpected network connection from SpanishMaster
        (user=%user.name connection=%fd.rip:%fd.rport container_id=%container.id)
      priority: NOTICE
      tags: [network, spanishmaster]
---
# Admission Controller Webhook
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: spanishmaster-security-webhook
webhooks:
- name: security.spanishmaster.app
  clientConfig:
    service:
      name: security-webhook
      namespace: spanishmaster
      path: "/validate"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments"]
  namespaceSelector:
    matchLabels:
      name: spanishmaster
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail