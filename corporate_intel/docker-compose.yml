version: '3.9'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: corporate-intel-postgres
    environment:
      POSTGRES_DB: corporate_intel
      POSTGRES_USER: intel_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--locale=C.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intel_user -d corporate_intel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: corporate-intel-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: corporate-intel-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prefect server
  prefect:
    image: prefecthq/prefect:2-python3.11
    container_name: corporate-intel-prefect
    command: prefect server start --host 0.0.0.0
    environment:
      PREFECT_API_URL: http://localhost:4200/api
      PREFECT_SERVER_API_HOST: 0.0.0.0
    ports:
      - "4200:4200"
    volumes:
      - prefect_data:/root/.prefect
    depends_on:
      - postgres

  # Apache Superset
  superset:
    image: apache/superset:latest
    container_name: corporate-intel-superset
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      DATABASE_HOST: postgres
      DATABASE_USER: intel_user
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_DB: corporate_intel
    ports:
      - "8088:8088"
    volumes:
      - superset_data:/app/superset_home
    depends_on:
      - postgres
      - redis

  # Ray head node
  ray-head:
    image: rayproject/ray:latest-py311
    container_name: corporate-intel-ray-head
    ports:
      - "8265:8265"  # Ray dashboard
      - "10001:10001"
    environment:
      RAY_HEAD_SERVICE_HOST: ray-head
    command: ray start --head --dashboard-host=0.0.0.0
    volumes:
      - ray_data:/tmp/ray

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: corporate-intel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: corporate-intel-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: corporate-intel-loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prefect_data:
  superset_data:
  ray_data:
  prometheus_data:
  grafana_data:
  loki_data: