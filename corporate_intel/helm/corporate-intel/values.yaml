# Corporate Intelligence Platform Helm Values
# ============================================

# Global settings
global:
  environment: production
  domain: corporate-intel.example.com
  
# API Service
api:
  enabled: true
  replicaCount: 3
  image:
    repository: corporate-intel-api
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: LoadBalancer
    port: 80
    targetPort: 8000
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/rate-limit: "100"
    hosts:
      - host: api.corporate-intel.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: api-tls
        hosts:
          - api.corporate-intel.example.com
  
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 2Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    APP_NAME: "Corporate Intelligence Platform"
    ENVIRONMENT: production
    DEBUG: "false"
    WORKERS: "4"
    
  secrets:
    # These will be set via --set or values-secret.yaml
    POSTGRES_PASSWORD: ""
    REDIS_PASSWORD: ""
    SECRET_KEY: ""
    ALPHA_VANTAGE_API_KEY: ""

# Dashboard Service
dashboard:
  enabled: true
  replicaCount: 2
  image:
    repository: corporate-intel-dashboard
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8050
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    hosts:
      - host: dashboard.corporate-intel.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: dashboard-tls
        hosts:
          - dashboard.corporate-intel.example.com
  
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi

# Ray Cluster
ray:
  enabled: true
  head:
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
  
  worker:
    replicaCount: 3
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi

# Prefect
prefect:
  enabled: true
  server:
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
  
  agent:
    replicaCount: 2
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

# PostgreSQL (TimescaleDB)
postgresql:
  enabled: true
  auth:
    database: corporate_intel
    username: intel_user
    # password set via secrets
  
  image:
    registry: docker.io
    repository: timescale/timescaledb-ha
    tag: pg15-latest
  
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: fast-ssd
    
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    
    initdb:
      scripts:
        01-extensions.sql: |
          CREATE EXTENSION IF NOT EXISTS timescaledb;
          CREATE EXTENSION IF NOT EXISTS vector;
          CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

# Redis
redis:
  enabled: true
  auth:
    enabled: true
    # password set via secrets
  
  master:
    persistence:
      enabled: true
      size: 10Gi
    
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
  
  replica:
    replicaCount: 2
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 512Mi

# MinIO
minio:
  enabled: true
  auth:
    # rootUser and rootPassword set via secrets
    rootUser: admin
  
  persistence:
    enabled: true
    size: 50Gi
    storageClass: standard
  
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  
  defaultBuckets: "corporate-documents,analysis-reports"

# Monitoring
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    retention: 30d
    storage:
      size: 50Gi
  
  grafana:
    enabled: true
    adminPassword: "" # Set via secrets
    ingress:
      enabled: true
      hosts:
        - grafana.corporate-intel.example.com
  
  loki:
    enabled: true
    retention: 7d
    storage:
      size: 20Gi
  
  jaeger:
    enabled: true
    storage:
      type: elasticsearch
      elasticsearch:
        host: elasticsearch
        port: 9200

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *" # Daily at 2 AM
  retention: 30 # days
  
  postgres:
    enabled: true
    s3:
      bucket: corporate-intel-backups
      prefix: postgres
  
  minio:
    enabled: true
    s3:
      bucket: corporate-intel-backups
      prefix: minio

# Security
security:
  networkPolicies:
    enabled: true
  
  podSecurityPolicies:
    enabled: true
  
  rbac:
    create: true
  
  serviceAccount:
    create: true
    name: corporate-intel