import { test, expect } from '@playwright/test';\n\ntest.describe('VocabLens User Journey', () => {\n  test.beforeEach(async ({ page }) => {\n    // Navigate to the application\n    await page.goto('/');\n    \n    // Wait for the app to be fully loaded\n    await page.waitForSelector('[data-testid=\"app-loaded\"]', { state: 'visible' });\n  });\n\n  test('New user onboarding flow', async ({ page }) => {\n    // Should show welcome screen for new users\n    await expect(page.getByTestId('welcome-screen')).toBeVisible();\n    \n    // Click \"Get Started\" button\n    await page.getByRole('button', { name: /get started/i }).click();\n    \n    // Should show onboarding tutorial\n    await expect(page.getByTestId('onboarding-tutorial')).toBeVisible();\n    \n    // Go through tutorial steps\n    const nextButton = page.getByRole('button', { name: /next/i });\n    \n    // Step 1: Search for images\n    await expect(page.getByText('Search for beautiful images')).toBeVisible();\n    await nextButton.click();\n    \n    // Step 2: Generate descriptions\n    await expect(page.getByText('Generate AI descriptions')).toBeVisible();\n    await nextButton.click();\n    \n    // Step 3: Learn vocabulary\n    await expect(page.getByText('Build your vocabulary')).toBeVisible();\n    await nextButton.click();\n    \n    // Complete onboarding\n    await page.getByRole('button', { name: /start learning/i }).click();\n    \n    // Should navigate to main search interface\n    await expect(page.getByRole('searchbox')).toBeVisible();\n    await expect(page.getByTestId('search-interface')).toBeVisible();\n  });\n\n  test('Complete learning session workflow', async ({ page }) => {\n    // Skip onboarding if present\n    const skipButton = page.getByRole('button', { name: /skip/i });\n    if (await skipButton.isVisible()) {\n      await skipButton.click();\n    }\n\n    // Step 1: Search for images\n    const searchBox = page.getByRole('searchbox');\n    await expect(searchBox).toBeVisible();\n    \n    await searchBox.fill('beautiful sunset over ocean');\n    await page.getByRole('button', { name: /search/i }).click();\n    \n    // Wait for search results\n    await page.waitForSelector('[data-testid=\"image-results\"]', { state: 'visible' });\n    \n    // Verify images are displayed\n    const imageCards = page.getByTestId('image-card');\n    await expect(imageCards.first()).toBeVisible();\n    \n    // Step 2: Select an image\n    await imageCards.first().click();\n    \n    // Should show selected image in preview\n    await expect(page.getByTestId('selected-image-preview')).toBeVisible();\n    \n    // Step 3: Generate AI description\n    const generateButton = page.getByRole('button', { name: /generate description/i });\n    await expect(generateButton).toBeVisible();\n    await generateButton.click();\n    \n    // Wait for description generation\n    await page.waitForSelector('[data-testid=\"ai-description\"]', { \n      state: 'visible',\n      timeout: 15000 \n    });\n    \n    // Verify description is generated\n    const description = page.getByTestId('ai-description');\n    await expect(description).toBeVisible();\n    \n    // Should contain Spanish text\n    const descriptionText = await description.textContent();\n    expect(descriptionText).toMatch(/[áéíóúñ]/); // Contains Spanish characters\n    \n    // Step 4: Interact with vocabulary\n    await page.waitForSelector('[data-testid=\"vocabulary-section\"]', { state: 'visible' });\n    \n    const vocabularyItems = page.getByTestId('vocabulary-item');\n    await expect(vocabularyItems.first()).toBeVisible();\n    \n    // Click on a vocabulary item to see translation\n    await vocabularyItems.first().click();\n    \n    // Should show translation popup or expand details\n    await expect(page.getByTestId('vocabulary-translation')).toBeVisible();\n    \n    // Step 5: Add vocabulary to personal collection\n    const addToCollectionButton = page.getByRole('button', { name: /add to collection/i });\n    await addToCollectionButton.click();\n    \n    // Should show success notification\n    await expect(page.getByText(/added to vocabulary/i)).toBeVisible();\n  });\n\n  test('Vocabulary management workflow', async ({ page }) => {\n    // Navigate to vocabulary page\n    await page.getByRole('link', { name: /vocabulary/i }).click();\n    \n    // Wait for vocabulary page to load\n    await expect(page.getByTestId('vocabulary-page')).toBeVisible();\n    \n    // Should show vocabulary collection\n    await expect(page.getByTestId('vocabulary-collection')).toBeVisible();\n    \n    // Test search functionality\n    const vocabularySearchBox = page.getByPlaceholder(/search vocabulary/i);\n    await vocabularySearchBox.fill('playa');\n    \n    // Should filter results\n    await page.waitForTimeout(500); // Wait for debounce\n    const filteredItems = page.getByTestId('vocabulary-item');\n    const count = await filteredItems.count();\n    expect(count).toBeGreaterThan(0);\n    \n    // Test difficulty level filter\n    const difficultyFilter = page.getByTestId('difficulty-filter');\n    await difficultyFilter.selectOption('beginner');\n    \n    // Should show only beginner level words\n    await page.waitForTimeout(500);\n    const beginnerItems = page.getByTestId('vocabulary-item');\n    const beginnerCount = await beginnerItems.count();\n    expect(beginnerCount).toBeGreaterThanOrEqual(0);\n    \n    // Test vocabulary item actions\n    if (beginnerCount > 0) {\n      const firstItem = beginnerItems.first();\n      \n      // Hover to show actions\n      await firstItem.hover();\n      \n      // Edit vocabulary item\n      const editButton = page.getByTestId('edit-vocabulary-button');\n      await editButton.click();\n      \n      // Should show edit dialog\n      await expect(page.getByTestId('edit-vocabulary-dialog')).toBeVisible();\n      \n      // Update notes\n      const notesField = page.getByPlaceholder(/add notes/i);\n      await notesField.fill('Updated notes for this vocabulary item');\n      \n      // Save changes\n      await page.getByRole('button', { name: /save/i }).click();\n      \n      // Should close dialog and show success message\n      await expect(page.getByTestId('edit-vocabulary-dialog')).not.toBeVisible();\n      await expect(page.getByText(/vocabulary updated/i)).toBeVisible();\n    }\n  });\n\n  test('Quiz functionality workflow', async ({ page }) => {\n    // Navigate to quiz page\n    await page.getByRole('link', { name: /quiz/i }).click();\n    \n    // Wait for quiz page to load\n    await expect(page.getByTestId('quiz-page')).toBeVisible();\n    \n    // Should show quiz options\n    await expect(page.getByTestId('quiz-options')).toBeVisible();\n    \n    // Select quiz difficulty\n    await page.getByTestId('difficulty-beginner').click();\n    \n    // Start quiz\n    await page.getByRole('button', { name: /start quiz/i }).click();\n    \n    // Should show first question\n    await expect(page.getByTestId('quiz-question')).toBeVisible();\n    await expect(page.getByTestId('question-counter')).toBeVisible();\n    \n    // Answer multiple choice question\n    const answerOptions = page.getByTestId('answer-option');\n    await expect(answerOptions.first()).toBeVisible();\n    \n    // Select first answer\n    await answerOptions.first().click();\n    \n    // Submit answer\n    await page.getByRole('button', { name: /submit/i }).click();\n    \n    // Should show feedback\n    await expect(page.getByTestId('answer-feedback')).toBeVisible();\n    \n    // Continue to next question\n    await page.getByRole('button', { name: /next/i }).click();\n    \n    // Should show next question or results if quiz is complete\n    const isQuizComplete = await page.getByTestId('quiz-results').isVisible();\n    \n    if (isQuizComplete) {\n      // Verify quiz results\n      await expect(page.getByTestId('quiz-score')).toBeVisible();\n      await expect(page.getByTestId('quiz-performance')).toBeVisible();\n      \n      // Should have option to retake or return to vocabulary\n      await expect(page.getByRole('button', { name: /retake quiz/i })).toBeVisible();\n      await expect(page.getByRole('button', { name: /back to vocabulary/i })).toBeVisible();\n    } else {\n      // Continue with next questions\n      await expect(page.getByTestId('quiz-question')).toBeVisible();\n    }\n  });\n\n  test('Offline mode functionality', async ({ page, context }) => {\n    // Complete a learning session first to have cached data\n    await page.goto('/');\n    \n    // Skip onboarding\n    const skipButton = page.getByRole('button', { name: /skip/i });\n    if (await skipButton.isVisible()) {\n      await skipButton.click();\n    }\n    \n    // Perform search and generate description (creates cache)\n    const searchBox = page.getByRole('searchbox');\n    await searchBox.fill('beach');\n    await page.getByRole('button', { name: /search/i }).click();\n    \n    await page.waitForSelector('[data-testid=\"image-results\"]', { state: 'visible' });\n    const imageCards = page.getByTestId('image-card');\n    await imageCards.first().click();\n    \n    await page.getByRole('button', { name: /generate description/i }).click();\n    await page.waitForSelector('[data-testid=\"ai-description\"]', { state: 'visible' });\n    \n    // Now go offline\n    await context.setOffline(true);\n    \n    // Reload page to simulate offline startup\n    await page.reload();\n    \n    // Should show offline indicator\n    await expect(page.getByTestId('offline-indicator')).toBeVisible();\n    \n    // Should still be able to access cached content\n    await page.getByRole('link', { name: /vocabulary/i }).click();\n    await expect(page.getByTestId('vocabulary-page')).toBeVisible();\n    \n    // Vocabulary should be available from local storage/cache\n    const vocabularyItems = page.getByTestId('vocabulary-item');\n    if (await vocabularyItems.count() > 0) {\n      await expect(vocabularyItems.first()).toBeVisible();\n    }\n    \n    // Try to perform a new search (should show offline message)\n    await page.goto('/');\n    const offlineSearchBox = page.getByRole('searchbox');\n    await offlineSearchBox.fill('mountains');\n    await page.getByRole('button', { name: /search/i }).click();\n    \n    // Should show offline message\n    await expect(page.getByText(/you are offline/i)).toBeVisible();\n    \n    // Go back online\n    await context.setOffline(false);\n    \n    // Offline indicator should disappear\n    await page.waitForSelector('[data-testid=\"offline-indicator\"]', { state: 'hidden' });\n    \n    // Should be able to perform search again\n    await page.getByRole('button', { name: /search/i }).click();\n    await page.waitForSelector('[data-testid=\"image-results\"]', { state: 'visible' });\n  });\n\n  test('Responsive design on mobile devices', async ({ page, isMobile }) => {\n    test.skip(!isMobile, 'This test only runs on mobile');\n    \n    await page.goto('/');\n    \n    // Should show mobile-optimized layout\n    await expect(page.getByTestId('mobile-header')).toBeVisible();\n    \n    // Navigation should be in hamburger menu\n    const hamburgerButton = page.getByTestId('hamburger-menu');\n    await expect(hamburgerButton).toBeVisible();\n    \n    await hamburgerButton.click();\n    await expect(page.getByTestId('mobile-navigation')).toBeVisible();\n    \n    // Search interface should be mobile-friendly\n    const searchBox = page.getByRole('searchbox');\n    await expect(searchBox).toBeVisible();\n    \n    // Touch interactions should work\n    await searchBox.fill('sunset');\n    await page.getByRole('button', { name: /search/i }).click();\n    \n    await page.waitForSelector('[data-testid=\"image-results\"]', { state: 'visible' });\n    \n    // Image cards should be touch-friendly\n    const imageCards = page.getByTestId('image-card');\n    await imageCards.first().tap();\n    \n    await expect(page.getByTestId('selected-image-preview')).toBeVisible();\n    \n    // Swipe gestures should work for image navigation\n    const imagePreview = page.getByTestId('selected-image-preview');\n    \n    // Swipe left to go to next image\n    await imagePreview.swipeLeft();\n    \n    // Should show next image\n    // Note: Actual swipe implementation would depend on the specific swipe library used\n  });\n\n  test('Accessibility features', async ({ page }) => {\n    await page.goto('/');\n    \n    // Test keyboard navigation\n    await page.keyboard.press('Tab');\n    \n    // Should focus on first interactive element\n    const focusedElement = page.locator(':focus');\n    await expect(focusedElement).toBeVisible();\n    \n    // Continue tabbing through interface\n    await page.keyboard.press('Tab');\n    await page.keyboard.press('Tab');\n    \n    // Should be able to navigate to search box\n    const searchBox = page.getByRole('searchbox');\n    await searchBox.focus();\n    await expect(searchBox).toBeFocused();\n    \n    // Test screen reader compatibility\n    const searchBoxLabel = await searchBox.getAttribute('aria-label');\n    expect(searchBoxLabel).toBeTruthy();\n    \n    // Test high contrast mode\n    await page.emulateMedia({ colorScheme: 'dark' });\n    \n    // Interface should adapt to dark mode\n    const body = page.locator('body');\n    await expect(body).toHaveClass(/dark/);\n    \n    // Test skip links\n    const skipLink = page.getByText(/skip to main content/i);\n    if (await skipLink.isVisible()) {\n      await skipLink.click();\n      \n      const mainContent = page.getByRole('main');\n      await expect(mainContent).toBeFocused();\n    }\n    \n    // Test focus management in modals\n    const vocabularyLink = page.getByRole('link', { name: /vocabulary/i });\n    await vocabularyLink.click();\n    \n    if (await page.getByTestId('vocabulary-item').count() > 0) {\n      await page.getByTestId('vocabulary-item').first().click();\n      \n      // Modal should trap focus\n      const modal = page.getByRole('dialog');\n      if (await modal.isVisible()) {\n        const closeButton = modal.getByRole('button', { name: /close/i });\n        await expect(closeButton).toBeVisible();\n        \n        // Escape key should close modal\n        await page.keyboard.press('Escape');\n        await expect(modal).not.toBeVisible();\n      }\n    }\n  });\n});"