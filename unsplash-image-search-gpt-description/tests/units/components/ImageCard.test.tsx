import React from 'react';\nimport { vi, describe, it, expect, beforeEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '../../utils/testUtils';\nimport { ImageCard } from '../../../src/components/ImageSearch/ImageCard';\nimport { createMockPhoto } from '../../utils/testUtils';\n\nconst mockPhoto = createMockPhoto();\n\ndescribe('ImageCard', () => {\n  const mockOnSelect = vi.fn();\n  const mockOnLike = vi.fn();\n  const mockOnDownload = vi.fn();\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should render image card with photo information', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n      />\n    );\n\n    expect(screen.getByRole('img')).toBeInTheDocument();\n    expect(screen.getByRole('img')).toHaveAttribute('src', mockPhoto.urls.regular);\n    expect(screen.getByRole('img')).toHaveAttribute('alt', mockPhoto.alt_description);\n    \n    expect(screen.getByText(mockPhoto.user.name)).toBeInTheDocument();\n    expect(screen.getByText(`${mockPhoto.likes} likes`)).toBeInTheDocument();\n  });\n\n  it('should call onSelect when card is clicked', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n      />\n    );\n\n    const card = screen.getByTestId('image-card');\n    fireEvent.click(card);\n\n    expect(mockOnSelect).toHaveBeenCalledWith(mockPhoto);\n  });\n\n  it('should handle like button click', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        isLiked={false}\n      />\n    );\n\n    const likeButton = screen.getByLabelText(/like/i);\n    fireEvent.click(likeButton);\n\n    expect(mockOnLike).toHaveBeenCalledWith(mockPhoto.id);\n  });\n\n  it('should handle download button click', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n      />\n    );\n\n    const downloadButton = screen.getByLabelText(/download/i);\n    fireEvent.click(downloadButton);\n\n    expect(mockOnDownload).toHaveBeenCalledWith(mockPhoto.urls.full, mockPhoto.id);\n  });\n\n  it('should show liked state correctly', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        isLiked={true}\n      />\n    );\n\n    const likeButton = screen.getByLabelText(/like/i);\n    expect(likeButton).toHaveClass('liked'); // Assuming liked class exists\n  });\n\n  it('should show loading state for image', async () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        loading={true}\n      />\n    );\n\n    expect(screen.getByTestId('loading-skeleton')).toBeInTheDocument();\n  });\n\n  it('should handle image load error', async () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n      />\n    );\n\n    const image = screen.getByRole('img');\n    \n    // Simulate image error\n    fireEvent.error(image);\n\n    await waitFor(() => {\n      expect(screen.getByTestId('image-error-placeholder')).toBeInTheDocument();\n    });\n  });\n\n  it('should display blur hash while image loads', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        showBlurHash={true}\n      />\n    );\n\n    expect(screen.getByTestId('blur-hash-canvas')).toBeInTheDocument();\n  });\n\n  it('should show image tags', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        showTags={true}\n      />\n    );\n\n    mockPhoto.tags.forEach(tag => {\n      expect(screen.getByText(tag.title)).toBeInTheDocument();\n    });\n  });\n\n  it('should be keyboard accessible', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n      />\n    );\n\n    const card = screen.getByTestId('image-card');\n    \n    // Should be focusable\n    expect(card).toHaveAttribute('tabIndex', '0');\n    \n    // Should handle Enter key\n    fireEvent.keyDown(card, { key: 'Enter', code: 'Enter' });\n    expect(mockOnSelect).toHaveBeenCalledWith(mockPhoto);\n    \n    // Should handle Space key\n    fireEvent.keyDown(card, { key: ' ', code: 'Space' });\n    expect(mockOnSelect).toHaveBeenCalledWith(mockPhoto);\n  });\n\n  it('should support right-to-left languages', () => {\n    render(\n      <div dir=\"rtl\">\n        <ImageCard\n          photo={mockPhoto}\n          onSelect={mockOnSelect}\n          onLike={mockOnLike}\n          onDownload={mockOnDownload}\n        />\n      </div>\n    );\n\n    const card = screen.getByTestId('image-card');\n    expect(card).toHaveClass('rtl'); // Assuming RTL class exists\n  });\n\n  it('should handle lazy loading', async () => {\n    const { container } = render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        lazy={true}\n      />\n    );\n\n    const image = screen.getByRole('img');\n    \n    // Initially should have loading=\"lazy\"\n    expect(image).toHaveAttribute('loading', 'lazy');\n    \n    // Simulate intersection observer trigger\n    const mockIntersectionObserver = vi.fn();\n    mockIntersectionObserver.mockReturnValue({\n      observe: () => null,\n      unobserve: () => null,\n      disconnect: () => null\n    });\n    \n    window.IntersectionObserver = mockIntersectionObserver;\n  });\n\n  it('should display photographer profile link', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        showProfileLink={true}\n      />\n    );\n\n    const profileLink = screen.getByRole('link', { name: mockPhoto.user.name });\n    expect(profileLink).toHaveAttribute(\n      'href', \n      `https://unsplash.com/@${mockPhoto.user.username}`\n    );\n    expect(profileLink).toHaveAttribute('target', '_blank');\n    expect(profileLink).toHaveAttribute('rel', 'noopener noreferrer');\n  });\n\n  it('should handle high contrast mode', () => {\n    // Mock high contrast media query\n    window.matchMedia = vi.fn().mockImplementation((query) => ({\n      matches: query === '(prefers-contrast: high)',\n      media: query,\n      onchange: null,\n      addListener: vi.fn(),\n      removeListener: vi.fn(),\n      addEventListener: vi.fn(),\n      removeEventListener: vi.fn(),\n      dispatchEvent: vi.fn(),\n    }));\n\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n      />\n    );\n\n    const card = screen.getByTestId('image-card');\n    expect(card).toHaveClass('high-contrast'); // Assuming class exists\n  });\n\n  it('should show image dimensions', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        showDimensions={true}\n      />\n    );\n\n    expect(screen.getByText(`${mockPhoto.width} Ã— ${mockPhoto.height}`)).toBeInTheDocument();\n  });\n\n  it('should support custom className', () => {\n    const customClass = 'custom-image-card';\n    \n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n        className={customClass}\n      />\n    );\n\n    const card = screen.getByTestId('image-card');\n    expect(card).toHaveClass(customClass);\n  });\n\n  it('should prevent event bubbling on action buttons', () => {\n    render(\n      <ImageCard\n        photo={mockPhoto}\n        onSelect={mockOnSelect}\n        onLike={mockOnLike}\n        onDownload={mockOnDownload}\n      />\n    );\n\n    const likeButton = screen.getByLabelText(/like/i);\n    \n    const mockEvent = {\n      stopPropagation: vi.fn(),\n      preventDefault: vi.fn(),\n    };\n\n    fireEvent.click(likeButton, mockEvent);\n\n    expect(mockEvent.stopPropagation).toHaveBeenCalled();\n    expect(mockOnLike).toHaveBeenCalledWith(mockPhoto.id);\n    expect(mockOnSelect).not.toHaveBeenCalled();\n  });\n});"