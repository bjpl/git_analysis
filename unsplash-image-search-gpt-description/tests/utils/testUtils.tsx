import React, { ReactElement } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { BrowserRouter } from 'react-router-dom';\nimport { vi } from 'vitest';\n\n// Mock Supabase client\nconst mockSupabase = {\n  auth: {\n    getSession: vi.fn(() => Promise.resolve({ data: { session: null }, error: null })),\n    getUser: vi.fn(() => Promise.resolve({ data: { user: null }, error: null })),\n    onAuthStateChange: vi.fn(() => ({ data: { subscription: { unsubscribe: vi.fn() } } })),\n    signIn: vi.fn(),\n    signUp: vi.fn(),\n    signOut: vi.fn(),\n  },\n  from: vi.fn(() => ({\n    select: vi.fn().mockReturnThis(),\n    insert: vi.fn().mockReturnThis(),\n    update: vi.fn().mockReturnThis(),\n    delete: vi.fn().mockReturnThis(),\n    eq: vi.fn().mockReturnThis(),\n    order: vi.fn().mockReturnThis(),\n    limit: vi.fn().mockReturnThis(),\n    single: vi.fn(() => Promise.resolve({ data: null, error: null })),\n    then: vi.fn((callback) => callback({ data: [], error: null })),\n  })),\n  storage: {\n    from: vi.fn(() => ({\n      upload: vi.fn(() => Promise.resolve({ data: null, error: null })),\n      download: vi.fn(() => Promise.resolve({ data: null, error: null })),\n      remove: vi.fn(() => Promise.resolve({ data: null, error: null })),\n      getPublicUrl: vi.fn(() => ({ data: { publicUrl: 'mock-url' } })),\n    })),\n  },\n};\n\n// Test utilities provider\ninterface TestProvidersProps {\n  children: React.ReactNode;\n  queryClient?: QueryClient;\n  initialEntries?: string[];\n}\n\nfunction TestProviders({ \n  children, \n  queryClient, \n  initialEntries = ['/'] \n}: TestProvidersProps) {\n  const testQueryClient = queryClient || new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n        gcTime: 0,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n    logger: {\n      log: vi.fn(),\n      warn: vi.fn(),\n      error: vi.fn(),\n    },\n  });\n\n  return (\n    <QueryClientProvider client={testQueryClient}>\n      <BrowserRouter>\n        {children}\n      </BrowserRouter>\n    </QueryClientProvider>\n  );\n}\n\n// Custom render function\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  queryClient?: QueryClient;\n  initialEntries?: string[];\n}\n\nfunction customRender(\n  ui: ReactElement,\n  options?: CustomRenderOptions\n) {\n  const { queryClient, initialEntries, ...renderOptions } = options || {};\n\n  const Wrapper = ({ children }: { children: React.ReactNode }) => (\n    <TestProviders queryClient={queryClient} initialEntries={initialEntries}>\n      {children}\n    </TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n}\n\n// Test data factories\nexport const createMockPhoto = (overrides = {}) => ({\n  id: 'test-photo-1',\n  created_at: '2023-01-01T00:00:00Z',\n  updated_at: '2023-01-01T00:00:00Z',\n  width: 4000,\n  height: 3000,\n  color: '#E5E5E5',\n  blur_hash: 'LGF5]+Yk^6#M@-5c,1J5@[or[Q6.',\n  downloads: 1000,\n  likes: 100,\n  description: 'A beautiful test image',\n  alt_description: 'test image',\n  urls: {\n    raw: 'https://images.unsplash.com/test-raw',\n    full: 'https://images.unsplash.com/test-full',\n    regular: 'https://images.unsplash.com/test-regular',\n    small: 'https://images.unsplash.com/test-small',\n    thumb: 'https://images.unsplash.com/test-thumb',\n  },\n  user: {\n    id: 'user-1',\n    username: 'testuser',\n    name: 'Test User',\n    profile_image: {\n      small: 'https://images.unsplash.com/profile-small',\n      medium: 'https://images.unsplash.com/profile-medium',\n      large: 'https://images.unsplash.com/profile-large',\n    },\n  },\n  tags: [\n    { title: 'test', type: 'search' },\n    { title: 'photography', type: 'category' },\n  ],\n  ...overrides,\n});\n\nexport const createMockVocabularyEntry = (overrides = {}) => ({\n  id: 'vocab-test-1',\n  user_id: 'user-123',\n  spanish_word: 'prueba',\n  english_translation: 'test',\n  context: 'Esta es una prueba',\n  image_url: 'https://images.unsplash.com/test',\n  search_query: 'test',\n  difficulty_level: 'intermediate' as const,\n  mastery_level: 2,\n  times_reviewed: 3,\n  last_reviewed: '2024-01-15T10:00:00Z',\n  created_at: '2024-01-01T00:00:00Z',\n  updated_at: '2024-01-15T10:00:00Z',\n  ...overrides,\n});\n\nexport const createMockUser = (overrides = {}) => ({\n  id: 'user-123',\n  email: 'test@example.com',\n  user_metadata: {\n    full_name: 'Test User',\n    avatar_url: 'https://example.com/avatar.jpg',\n    ...overrides,\n  },\n  created_at: '2023-01-01T00:00:00Z',\n  updated_at: '2023-01-01T00:00:00Z',\n});\n\n// Assertion helpers\nexport const expectElementToBeVisible = (element: HTMLElement) => {\n  expect(element).toBeInTheDocument();\n  expect(element).toBeVisible();\n};\n\nexport const expectElementToHaveAccessibleName = (element: HTMLElement, name: string) => {\n  expect(element).toHaveAccessibleName(name);\n};\n\nexport const expectLoadingState = (container: HTMLElement) => {\n  expect(container.querySelector('[data-testid=\"loading-spinner\"]')).toBeInTheDocument();\n};\n\nexport const expectErrorState = (container: HTMLElement, message?: string) => {\n  const errorElement = container.querySelector('[data-testid=\"error-message\"]');\n  expect(errorElement).toBeInTheDocument();\n  if (message) {\n    expect(errorElement).toHaveTextContent(message);\n  }\n};\n\nexport const expectEmptyState = (container: HTMLElement) => {\n  expect(container.querySelector('[data-testid=\"empty-state\"]')).toBeInTheDocument();\n};\n\n// Performance testing helpers\nexport const measureRenderTime = async (renderFn: () => Promise<void> | void) => {\n  const start = performance.now();\n  await renderFn();\n  const end = performance.now();\n  return end - start;\n};\n\n// Accessibility testing helpers\nexport const checkKeyboardNavigation = async (element: HTMLElement) => {\n  element.focus();\n  expect(document.activeElement).toBe(element);\n};\n\nexport const checkAriaLabels = (element: HTMLElement, expectedLabel: string) => {\n  expect(element).toHaveAttribute('aria-label', expectedLabel);\n};\n\n// Mock implementations\nexport const mockIntersectionObserver = () => {\n  const observe = vi.fn();\n  const unobserve = vi.fn();\n  const disconnect = vi.fn();\n\n  window.IntersectionObserver = vi.fn(() => ({\n    observe,\n    unobserve,\n    disconnect,\n  }));\n\n  return { observe, unobserve, disconnect };\n};\n\nexport const mockResizeObserver = () => {\n  const observe = vi.fn();\n  const unobserve = vi.fn();\n  const disconnect = vi.fn();\n\n  window.ResizeObserver = vi.fn(() => ({\n    observe,\n    unobserve,\n    disconnect,\n  }));\n\n  return { observe, unobserve, disconnect };\n};\n\n// Re-export everything from RTL\nexport * from '@testing-library/react';\nexport { default as userEvent } from '@testing-library/user-event';\n\n// Export custom render as default\nexport { customRender as render, mockSupabase };