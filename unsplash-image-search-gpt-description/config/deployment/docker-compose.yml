version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"  # Web frontend
      - "8000:8000"  # Python backend
      - "5678:5678"  # Debug port
    volumes:
      - .:/app
      - /app/node_modules
      - /app/venv
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - PYTHONPATH=/app
    depends_on:
      - supabase-db
      - redis
    networks:
      - app-network

  # Supabase local development
  supabase-db:
    image: supabase/postgres:15.1.0.55
    command: postgres -c log_statement=all -c log_destination=stderr -c log_min_duration_statement=0
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - supabase-db:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./supabase/seed:/docker-entrypoint-initdb.d/seed:ro
    networks:
      - app-network

  # Supabase Auth
  supabase-auth:
    image: supabase/gotrue:v2.99.0
    depends_on:
      - supabase-db
    restart: unless-stopped
    ports:
      - "9999:9999"
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://postgres:postgres@supabase-db:5432/postgres?schempath=auth
      GOTRUE_SITE_URL: http://localhost:3000
      GOTRUE_URI_ALLOW_LIST: "http://localhost:3000"
      GOTRUE_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      GOTRUE_DISABLE_SIGNUP: "false"
    networks:
      - app-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - app-network

  # Metrics visualization with Grafana
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  supabase-db:
  redis-data:
  prometheus-data:
  grafana-data: