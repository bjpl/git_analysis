import React, { useState } from 'react';\nimport {\n  BookOpen,\n  BarChart3,\n  Users,\n  Settings,\n  Plus,\n  Zap,\n  Download,\n  Star,\n  Brain\n} from 'lucide-react';\nimport { VocabularyList } from './VocabularyList';\nimport { VocabularyStats } from './VocabularyStats';\nimport { VocabularyAnalyticsDashboard } from './VocabularyAnalytics';\nimport { VocabularyMarketplaceComponent } from './VocabularyMarketplace';\nimport { AddVocabulary } from './AddVocabulary';\nimport { ExportDialog } from './ExportDialog';\nimport { useVocabulary } from '../../hooks/useVocabulary';\nimport { useVocabularyReview } from '../../hooks/useVocabulary';\nimport { Card } from '../Shared/Card/Card';\nimport { Button } from '../Shared/Button/Button';\nimport { Modal } from '../Shared/Modal/Modal';\n\ninterface VocabularyManagerProps {\n  className?: string;\n  defaultTab?: 'vocabulary' | 'review' | 'analytics' | 'marketplace';\n}\n\nexport function VocabularyManager({ \n  className = '',\n  defaultTab = 'vocabulary'\n}: VocabularyManagerProps) {\n  const { stats, getDueForReview, isLoading } = useVocabulary();\n  const {\n    hasReviews,\n    dueItems,\n    currentSession,\n    startSession,\n    resetSession\n  } = useVocabularyReview();\n  \n  const [activeTab, setActiveTab] = useState(defaultTab);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showExportDialog, setShowExportDialog] = useState(false);\n\n  const tabs = [\n    {\n      id: 'vocabulary',\n      label: 'My Vocabulary',\n      icon: <BookOpen className=\"w-5 h-5\" />,\n      badge: stats?.totalWords\n    },\n    {\n      id: 'review',\n      label: 'Review',\n      icon: <Zap className=\"w-5 h-5\" />,\n      badge: dueItems.length,\n      urgent: dueItems.length > 0\n    },\n    {\n      id: 'analytics',\n      label: 'Analytics',\n      icon: <BarChart3 className=\"w-5 h-5\" />\n    },\n    {\n      id: 'marketplace',\n      label: 'Marketplace',\n      icon: <Users className=\"w-5 h-5\" />\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className={`vocabulary-manager ${className}`}>\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-16 bg-gray-200 rounded\"></div>\n          <div className=\"h-96 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`vocabulary-manager ${className}`}>\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Vocabulary Manager\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Master your vocabulary with intelligent spaced repetition and analytics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            {hasReviews && (\n              <Button\n                variant=\"primary\"\n                onClick={startSession}\n                className=\"bg-orange-500 hover:bg-orange-600\"\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Start Review ({dueItems.length})\n              </Button>\n            )}\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => setShowExportDialog(true)}\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n            \n            <Button\n              variant=\"primary\"\n              onClick={() => setShowAddModal(true)}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Word\n            </Button>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Words</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {stats?.totalWords || 0}\n                </p>\n              </div>\n              <BookOpen className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </Card>\n          \n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Due for Review</p>\n                <p className=\"text-2xl font-bold text-orange-500\">\n                  {dueItems.length}\n                </p>\n              </div>\n              <Zap className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </Card>\n          \n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Mastered</p>\n                <p className=\"text-2xl font-bold text-green-500\">\n                  {stats?.masteredWords || 0}\n                </p>\n              </div>\n              <Star className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </Card>\n          \n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Accuracy</p>\n                <p className=\"text-2xl font-bold text-purple-500\">\n                  {Math.round(stats?.accuracy || 0)}%\n                </p>\n              </div>\n              <Brain className=\"w-8 h-8 text-purple-500\" />\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"border-b border-gray-200 dark:border-gray-700 mb-8\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n              }`}\n            >\n              {tab.icon}\n              <span className=\"ml-2\">{tab.label}</span>\n              {tab.badge !== undefined && tab.badge > 0 && (\n                <span className={`ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                  tab.urgent\n                    ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300'\n                    : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n                }`}>\n                  {tab.badge}\n                </span>\n              )}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"tab-content\">\n        {activeTab === 'vocabulary' && (\n          <div className=\"space-y-6\">\n            <VocabularyStats showDetailedCharts={false} />\n            <VocabularyList \n              showAddButton={false}\n              className=\"mt-6\"\n            />\n          </div>\n        )}\n        \n        {activeTab === 'review' && (\n          <div className=\"space-y-6\">\n            {!hasReviews ? (\n              <Card className=\"p-12 text-center\">\n                <Zap className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                  All Caught Up!\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                  You have no vocabulary words due for review right now.\n                </p>\n                <div className=\"flex justify-center gap-4\">\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => setShowAddModal(true)}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add New Words\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setActiveTab('marketplace')}\n                  >\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    Browse Marketplace\n                  </Button>\n                </div>\n              </Card>\n            ) : (\n              <div>\n                <Card className=\"p-6 mb-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        Ready for Review\n                      </h3>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        {dueItems.length} words are waiting for review\n                      </p>\n                    </div>\n                    \n                    <Button\n                      variant=\"primary\"\n                      onClick={startSession}\n                      className=\"bg-orange-500 hover:bg-orange-600\"\n                    >\n                      <Zap className=\"w-4 h-4 mr-2\" />\n                      Start Review Session\n                    </Button>\n                  </div>\n                  \n                  {/* Preview of due items */}\n                  <div className=\"space-y-2\">\n                    {dueItems.slice(0, 5).map((item) => (\n                      <div key={item.id} className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div>\n                          <span className=\"font-medium text-gray-900 dark:text-white\">\n                            {item.word}\n                          </span>\n                          <span className=\"text-gray-500 dark:text-gray-400 ml-2\">\n                            → {item.translation}\n                          </span>\n                        </div>\n                        <span className=\"text-xs text-gray-400\">\n                          {item.nextReviewAt && new Date(item.nextReviewAt) < new Date() \n                            ? 'Overdue' \n                            : 'Due now'\n                          }\n                        </span>\n                      </div>\n                    ))}\n                    \n                    {dueItems.length > 5 && (\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 text-center pt-2\">\n                        ... and {dueItems.length - 5} more\n                      </p>\n                    )}\n                  </div>\n                </Card>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {activeTab === 'analytics' && (\n          <VocabularyAnalyticsDashboard />\n        )}\n        \n        {activeTab === 'marketplace' && (\n          <VocabularyMarketplaceComponent />\n        )}\n      </div>\n\n      {/* Modals */}\n      <Modal\n        isOpen={showAddModal}\n        onClose={() => setShowAddModal(false)}\n        title=\"Add New Vocabulary\"\n        size=\"lg\"\n      >\n        <AddVocabulary onClose={() => setShowAddModal(false)} />\n      </Modal>\n\n      <Modal\n        isOpen={showExportDialog}\n        onClose={() => setShowExportDialog(false)}\n        title=\"Export Vocabulary\"\n        size=\"lg\"\n      >\n        <ExportDialog onClose={() => setShowExportDialog(false)} />\n      </Modal>\n    </div>\n  );\n}