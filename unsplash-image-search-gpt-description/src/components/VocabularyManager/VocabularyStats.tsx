import React from 'react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  PieChart, 
  Pie, 
  Cell, 
  LineChart, 
  Line, 
  ResponsiveContainer,
  Area,
  AreaChart
} from 'recharts';
import { 
  TrendingUp, 
  Target, 
  Award, 
  Clock, 
  Brain,
  Zap,
  BookOpen,
  CheckCircle,
  AlertCircle,
  Calendar
} from 'lucide-react';
import { VocabularyStats, MasteryLevel } from '../../types';
import { useVocabulary } from '../../hooks/useVocabulary';
import { Card } from '../Shared/Card/Card';

interface VocabularyStatsProps {
  className?: string;
  showDetailedCharts?: boolean;
}

export function VocabularyStats({ 
  className = '', 
  showDetailedCharts = true 
}: VocabularyStatsProps) {
  const { stats, vocabularyItems, getDueForReview, isLoading } = useVocabulary();\n\n  if (isLoading) {\n    return (\n      <div className={`vocabulary-stats ${className}`}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          {[1, 2, 3, 4].map(i => (\n            <Card key={i} className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!stats) return null;\n\n  const dueForReview = getDueForReview();\n  const masteryData = [\n    { name: 'New', value: stats.newWords, color: '#6b7280' },\n    { name: 'Learning', value: stats.learningWords, color: '#f59e0b' },\n    { name: 'Review', value: stats.reviewWords, color: '#3b82f6' },\n    { name: 'Mastered', value: stats.masteredWords, color: '#10b981' }\n  ];\n\n  const categoryData = Object.entries(stats.categoryBreakdown).map(([name, count]) => ({\n    name,\n    value: count\n  }));\n\n  const weeklyData = stats.weeklyProgress.map((count, index) => ({\n    day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][index],\n    words: count,\n    reviews: Math.floor(count * 1.5) // Estimated reviews\n  }));\n\n  const difficultyData = Array.from({ length: 10 }, (_, i) => {\n    const level = i + 1;\n    const count = vocabularyItems.filter(item => item.difficulty === level).length;\n    return { difficulty: level, count };\n  });\n\n  const progressPercentage = stats.dailyGoal > 0 \n    ? Math.min(100, (stats.dailyProgress / stats.dailyGoal) * 100)\n    : 0;\n\n  const avgAccuracy = stats.accuracy;\n  const retentionRate = stats.totalWords > 0 \n    ? (stats.masteredWords / stats.totalWords) * 100 \n    : 0;\n\n  return (\n    <div className={`vocabulary-stats ${className}`}>\n      {/* Key Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        {/* Total Words */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Words</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {stats.totalWords.toLocaleString()}\n              </p>\n            </div>\n            <div className=\"p-3 bg-blue-100 dark:bg-blue-900 rounded-full\">\n              <BookOpen className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"flex items-center text-sm\">\n              <span className={`font-medium ${\n                stats.masteredWords > stats.totalWords * 0.5 \n                  ? 'text-green-600' \n                  : 'text-yellow-600'\n              }`}>\n                {Math.round(retentionRate)}% mastered\n              </span>\n            </div>\n          </div>\n        </Card>\n\n        {/* Daily Progress */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Daily Progress</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {stats.dailyProgress}/{stats.dailyGoal}\n              </p>\n            </div>\n            <div className=\"p-3 bg-green-100 dark:bg-green-900 rounded-full\">\n              <Target className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n              <div \n                className=\"bg-green-600 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${progressPercentage}%` }}\n              ></div>\n            </div>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n              {Math.round(progressPercentage)}% of daily goal\n            </p>\n          </div>\n        </Card>\n\n        {/* Current Streak */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Current Streak</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {stats.streak} days\n              </p>\n            </div>\n            <div className=\"p-3 bg-orange-100 dark:bg-orange-900 rounded-full\">\n              <Zap className=\"w-6 h-6 text-orange-600 dark:text-orange-400\" />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"flex items-center text-sm\">\n              <span className=\"text-orange-600 font-medium\">\n                ðŸ”¥ Keep it going!\n              </span>\n            </div>\n          </div>\n        </Card>\n\n        {/* Due for Review */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Due for Review</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {dueForReview.length}\n              </p>\n            </div>\n            <div className={`p-3 rounded-full ${\n              dueForReview.length > 10 \n                ? 'bg-red-100 dark:bg-red-900' \n                : dueForReview.length > 0 \n                ? 'bg-yellow-100 dark:bg-yellow-900' \n                : 'bg-gray-100 dark:bg-gray-700'\n            }`}>\n              <Clock className={`w-6 h-6 ${\n                dueForReview.length > 10 \n                  ? 'text-red-600 dark:text-red-400' \n                  : dueForReview.length > 0 \n                  ? 'text-yellow-600 dark:text-yellow-400' \n                  : 'text-gray-600 dark:text-gray-400'\n              }`} />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {dueForReview.length === 0 \n                ? 'All caught up!' \n                : dueForReview.length === 1 \n                ? 'Start reviewing' \n                : 'Time to review'\n              }\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Detailed Charts */}\n      {showDetailedCharts && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n          {/* Mastery Level Distribution */}\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Mastery Distribution\n              </h3>\n              <Award className=\"w-5 h-5 text-gray-500\" />\n            </div>\n            \n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={masteryData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={100}\n                    dataKey=\"value\"\n                    label={({ name, value, percent }) => \n                      `${name}: ${value} (${(percent * 100).toFixed(0)}%)`\n                    }\n                  >\n                    {masteryData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n\n          {/* Weekly Activity */}\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Weekly Activity\n              </h3>\n              <TrendingUp className=\"w-5 h-5 text-gray-500\" />\n            </div>\n            \n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={weeklyData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"day\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"words\" \n                    stackId=\"1\"\n                    stroke=\"#3b82f6\" \n                    fill=\"#3b82f6\" \n                    fillOpacity={0.6}\n                    name=\"Words Added\"\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"reviews\" \n                    stackId=\"1\"\n                    stroke=\"#10b981\" \n                    fill=\"#10b981\" \n                    fillOpacity={0.6}\n                    name=\"Reviews Completed\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Additional Stats */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Category Breakdown */}\n        {categoryData.length > 0 && (\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Categories\n              </h3>\n              <Brain className=\"w-5 h-5 text-gray-500\" />\n            </div>\n            \n            <div className=\"space-y-3\">\n              {categoryData.slice(0, 5).map((category, index) => {\n                const percentage = (category.value / stats.totalWords) * 100;\n                return (\n                  <div key={category.name} className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      {category.name}\n                    </span>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-24 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full\"\n                          style={{ width: `${percentage}%` }}\n                        ></div>\n                      </div>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400 w-8\">\n                        {category.value}\n                      </span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </Card>\n        )}\n\n        {/* Performance Metrics */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              Performance\n            </h3>\n            <CheckCircle className=\"w-5 h-5 text-gray-500\" />\n          </div>\n          \n          <div className=\"space-y-4\">\n            {/* Accuracy */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Average Accuracy\n                </span>\n                <span className={`text-sm font-bold ${\n                  avgAccuracy >= 80 \n                    ? 'text-green-600' \n                    : avgAccuracy >= 60 \n                    ? 'text-yellow-600' \n                    : 'text-red-600'\n                }`}>\n                  {Math.round(avgAccuracy)}%\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div \n                  className={`h-2 rounded-full transition-all duration-300 ${\n                    avgAccuracy >= 80 \n                      ? 'bg-green-600' \n                      : avgAccuracy >= 60 \n                      ? 'bg-yellow-600' \n                      : 'bg-red-600'\n                  }`}\n                  style={{ width: `${avgAccuracy}%` }}\n                ></div>\n              </div>\n            </div>\n\n            {/* Average Difficulty */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Average Difficulty\n                </span>\n                <span className=\"text-sm font-bold text-gray-900 dark:text-white\">\n                  {stats.averageDifficulty.toFixed(1)}/10\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div \n                  className=\"bg-purple-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${(stats.averageDifficulty / 10) * 100}%` }}\n                ></div>\n              </div>\n            </div>\n\n            {/* Retention Rate */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Retention Rate\n                </span>\n                <span className=\"text-sm font-bold text-green-600\">\n                  {Math.round(retentionRate)}%\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div \n                  className=\"bg-green-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${retentionRate}%` }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"mt-6 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n          Quick Actions\n        </h3>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <button className=\"flex flex-col items-center p-4 bg-blue-50 dark:bg-blue-900 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800 transition-colors\">\n            <Zap className=\"w-6 h-6 text-blue-600 dark:text-blue-400 mb-2\" />\n            <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n              Start Review\n            </span>\n            <span className=\"text-xs text-blue-600 dark:text-blue-400\">\n              {dueForReview.length} due\n            </span>\n          </button>\n          \n          <button className=\"flex flex-col items-center p-4 bg-green-50 dark:bg-green-900 rounded-lg hover:bg-green-100 dark:hover:bg-green-800 transition-colors\">\n            <Target className=\"w-6 h-6 text-green-600 dark:text-green-400 mb-2\" />\n            <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n              Set Goal\n            </span>\n            <span className=\"text-xs text-green-600 dark:text-green-400\">\n              Daily target\n            </span>\n          </button>\n          \n          <button className=\"flex flex-col items-center p-4 bg-purple-50 dark:bg-purple-900 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-800 transition-colors\">\n            <BookOpen className=\"w-6 h-6 text-purple-600 dark:text-purple-400 mb-2\" />\n            <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n              Add Words\n            </span>\n            <span className=\"text-xs text-purple-600 dark:text-purple-400\">\n              Expand vocabulary\n            </span>\n          </button>\n          \n          <button className=\"flex flex-col items-center p-4 bg-orange-50 dark:bg-orange-900 rounded-lg hover:bg-orange-100 dark:hover:bg-orange-800 transition-colors\">\n            <Calendar className=\"w-6 h-6 text-orange-600 dark:text-orange-400 mb-2\" />\n            <span className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">\n              Schedule\n            </span>\n            <span className=\"text-xs text-orange-600 dark:text-orange-400\">\n              Plan reviews\n            </span>\n          </button>\n        </div>\n      </Card>\n    </div>\n  );\n}