import React, { useState, useEffect } from 'react';\nimport {\n  Search,\n  Filter,\n  Download,\n  Star,\n  Users,\n  BookOpen,\n  Zap,\n  TrendingUp,\n  Globe,\n  Share,\n  Eye,\n  Heart,\n  MessageCircle,\n  Award,\n  Clock\n} from 'lucide-react';\nimport { SharedVocabularyList, VocabularyMarketplace } from '../../types';\nimport { vocabularyService } from '../../services/vocabularyService';\nimport { useVocabulary } from '../../hooks/useVocabulary';\nimport { Card } from '../Shared/Card/Card';\nimport { Button } from '../Shared/Button/Button';\nimport { Modal } from '../Shared/Modal/Modal';\n\ninterface VocabularyMarketplaceProps {\n  className?: string;\n}\n\nexport function VocabularyMarketplaceComponent({ className = '' }: VocabularyMarketplaceProps) {\n  const { addVocabularyItem } = useVocabulary();\n  const [marketplace, setMarketplace] = useState<VocabularyMarketplace | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [sortBy, setSortBy] = useState<'popular' | 'recent' | 'rating'>('popular');\n  const [selectedList, setSelectedList] = useState<SharedVocabularyList | null>(null);\n  const [showListModal, setShowListModal] = useState(false);\n  const [showShareModal, setShowShareModal] = useState(false);\n  const [isImporting, setIsImporting] = useState(false);\n\n  useEffect(() => {\n    loadMarketplace();\n  }, []);\n\n  const loadMarketplace = async () => {\n    try {\n      const lists = await vocabularyService.getSharedVocabularyLists();\n      \n      // Extract categories from lists\n      const categories = Array.from(new Set(lists.map(list => list.category).filter(Boolean)));\n      const popularTags = extractPopularTags(lists);\n      const featuredLists = lists.filter(list => list.rating >= 4.5).slice(0, 5);\n      \n      setMarketplace({\n        lists,\n        categories,\n        popularTags,\n        featuredLists\n      });\n    } catch (error) {\n      console.error('Failed to load marketplace:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleImportList = async (list: SharedVocabularyList) => {\n    setIsImporting(true);\n    \n    try {\n      // Import all vocabulary items from the shared list\n      const importPromises = list.items.map(item => \n        addVocabularyItem({\n          ...item,\n          sharedFromUserId: list.ownerId,\n          // Reset learning progress for imported items\n          timesReviewed: 0,\n          timesCorrect: 0,\n          streak: 0,\n          lastReviewedAt: undefined,\n          nextReviewAt: undefined\n        })\n      );\n      \n      await Promise.all(importPromises);\n      \n      // Update download count\n      // This would typically be done on the server\n      \n      alert(`Successfully imported ${list.items.length} vocabulary items!`);\n      setShowListModal(false);\n    } catch (error) {\n      console.error('Failed to import list:', error);\n      alert('Failed to import vocabulary list. Please try again.');\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  const filteredAndSortedLists = React.useMemo(() => {\n    if (!marketplace) return [];\n    \n    let filtered = marketplace.lists;\n    \n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(list =>\n        list.name.toLowerCase().includes(query) ||\n        list.description?.toLowerCase().includes(query) ||\n        list.tags.some(tag => tag.toLowerCase().includes(query))\n      );\n    }\n    \n    // Apply category filter\n    if (selectedCategory) {\n      filtered = filtered.filter(list => list.category === selectedCategory);\n    }\n    \n    // Apply sorting\n    switch (sortBy) {\n      case 'popular':\n        return filtered.sort((a, b) => b.downloadCount - a.downloadCount);\n      case 'recent':\n        return filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      case 'rating':\n        return filtered.sort((a, b) => b.rating - a.rating);\n      default:\n        return filtered;\n    }\n  }, [marketplace, searchQuery, selectedCategory, sortBy]);\n\n  if (isLoading) {\n    return (\n      <div className={`vocabulary-marketplace ${className}`}>\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-12 bg-gray-200 rounded\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map(i => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!marketplace) {\n    return (\n      <div className={`vocabulary-marketplace ${className}`}>\n        <div className=\"text-center py-12\">\n          <Globe className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n            Marketplace Unavailable\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Unable to load the vocabulary marketplace. Please try again later.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`vocabulary-marketplace ${className}`}>\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Vocabulary Marketplace\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Discover and share vocabulary collections with the community\n            </p>\n          </div>\n          \n          <Button\n            variant=\"primary\"\n            onClick={() => setShowShareModal(true)}\n          >\n            <Share className=\"w-4 h-4 mr-2\" />\n            Share Your List\n          </Button>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search vocabulary lists...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:border-gray-600 dark:bg-gray-800 dark:text-white\"\n            />\n          </div>\n          \n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            className=\"px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:border-gray-600 dark:bg-gray-800 dark:text-white\"\n          >\n            <option value=\"\">All Categories</option>\n            {marketplace.categories.map(category => (\n              <option key={category} value={category}>\n                {category}\n              </option>\n            ))}\n          </select>\n          \n          <select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as any)}\n            className=\"px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:border-gray-600 dark:bg-gray-800 dark:text-white\"\n          >\n            <option value=\"popular\">Most Popular</option>\n            <option value=\"recent\">Most Recent</option>\n            <option value=\"rating\">Highest Rated</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Featured Lists */}\n      {marketplace.featuredLists.length > 0 && (\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Award className=\"w-5 h-5 text-yellow-500\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n              Featured Collections\n            </h2>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {marketplace.featuredLists.map(list => (\n              <VocabularyListCard\n                key={list.id}\n                list={list}\n                onView={() => {\n                  setSelectedList(list);\n                  setShowListModal(true);\n                }}\n                featured\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* All Lists */}\n      <div className=\"mb-4\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n          All Collections ({filteredAndSortedLists.length})\n        </h2>\n        \n        {filteredAndSortedLists.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Search className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n              No Results Found\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Try adjusting your search terms or filters\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredAndSortedLists.map(list => (\n              <VocabularyListCard\n                key={list.id}\n                list={list}\n                onView={() => {\n                  setSelectedList(list);\n                  setShowListModal(true);\n                }}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* List Detail Modal */}\n      <Modal\n        isOpen={showListModal}\n        onClose={() => setShowListModal(false)}\n        title=\"Vocabulary Collection\"\n        size=\"lg\"\n      >\n        {selectedList && (\n          <div className=\"space-y-6\">\n            {/* List Header */}\n            <div className=\"border-b border-gray-200 dark:border-gray-700 pb-6\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex-1\">\n                  <h2 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\n                    {selectedList.name}\n                  </h2>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                    {selectedList.description}\n                  </p>\n                  \n                  <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\n                    <span className=\"flex items-center gap-1\">\n                      <Users className=\"w-4 h-4\" />\n                      {selectedList.ownerName}\n                    </span>\n                    <span className=\"flex items-center gap-1\">\n                      <BookOpen className=\"w-4 h-4\" />\n                      {selectedList.items.length} words\n                    </span>\n                    <span className=\"flex items-center gap-1\">\n                      <Download className=\"w-4 h-4\" />\n                      {selectedList.downloadCount} downloads\n                    </span>\n                    <span className=\"flex items-center gap-1\">\n                      <Star className=\"w-4 h-4\" />\n                      {selectedList.rating.toFixed(1)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Tags */}\n              {selectedList.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {selectedList.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs dark:bg-blue-900 dark:text-blue-300\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              )}\n              \n              <Button\n                variant=\"primary\"\n                onClick={() => handleImportList(selectedList)}\n                disabled={isImporting}\n                className=\"w-full\"\n              >\n                {isImporting ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    Importing...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Download className=\"w-4 h-4\" />\n                    Import {selectedList.items.length} Words\n                  </div>\n                )}\n              </Button>\n            </div>\n            \n            {/* Vocabulary Preview */}\n            <div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">\n                Vocabulary Preview\n              </h3>\n              \n              <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                {selectedList.items.slice(0, 20).map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                  >\n                    <div>\n                      <span className=\"font-medium text-gray-900 dark:text-white\">\n                        {item.word}\n                      </span>\n                      <span className=\"text-gray-500 dark:text-gray-400 ml-2\">\n                        → {item.translation}\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">\n                      Level {item.difficulty}\n                    </span>\n                  </div>\n                ))}\n                \n                {selectedList.items.length > 20 && (\n                  <div className=\"text-center text-sm text-gray-500 dark:text-gray-400 py-2\">\n                    ... and {selectedList.items.length - 20} more words\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </Modal>\n\n      {/* Share Modal - placeholder for now */}\n      <Modal\n        isOpen={showShareModal}\n        onClose={() => setShowShareModal(false)}\n        title=\"Share Your Vocabulary\"\n        size=\"md\"\n      >\n        <div className=\"text-center py-8\">\n          <Share className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n            Coming Soon!\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            The ability to share your vocabulary lists will be available in a future update.\n          </p>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\n// Vocabulary List Card Component\ninterface VocabularyListCardProps {\n  list: SharedVocabularyList;\n  onView: () => void;\n  featured?: boolean;\n}\n\nfunction VocabularyListCard({ list, onView, featured = false }: VocabularyListCardProps) {\n  return (\n    <Card className={`p-6 hover:shadow-lg transition-all cursor-pointer ${\n      featured ? 'ring-2 ring-yellow-400 bg-yellow-50 dark:bg-yellow-900' : ''\n    }`} onClick={onView}>\n      {featured && (\n        <div className=\"flex items-center gap-1 text-yellow-600 dark:text-yellow-400 mb-3\">\n          <Award className=\"w-4 h-4\" />\n          <span className=\"text-xs font-semibold uppercase tracking-wide\">Featured</span>\n        </div>\n      )}\n      \n      <div className=\"mb-4\">\n        <h3 className=\"font-bold text-gray-900 dark:text-white mb-2 line-clamp-2\">\n          {list.name}\n        </h3>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-3\">\n          {list.description || 'No description provided'}\n        </p>\n      </div>\n      \n      <div className=\"flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <span className=\"flex items-center gap-1\">\n            <BookOpen className=\"w-4 h-4\" />\n            {list.items.length}\n          </span>\n          <span className=\"flex items-center gap-1\">\n            <Star className=\"w-4 h-4\" />\n            {list.rating.toFixed(1)}\n          </span>\n        </div>\n        \n        <span className=\"flex items-center gap-1\">\n          <Download className=\"w-4 h-4\" />\n          {list.downloadCount}\n        </span>\n      </div>\n      \n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400\">\n          <Users className=\"w-3 h-3\" />\n          <span>{list.ownerName}</span>\n        </div>\n        \n        {list.category && (\n          <span className=\"px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs dark:bg-gray-700 dark:text-gray-300\">\n            {list.category}\n          </span>\n        )}\n      </div>\n      \n      {list.tags.length > 0 && (\n        <div className=\"flex flex-wrap gap-1 mt-3\">\n          {list.tags.slice(0, 3).map((tag, index) => (\n            <span\n              key={index}\n              className=\"px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs dark:bg-blue-900 dark:text-blue-300\"\n            >\n              {tag}\n            </span>\n          ))}\n          {list.tags.length > 3 && (\n            <span className=\"text-xs text-gray-400\">+{list.tags.length - 3}</span>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n\n// Helper function to extract popular tags\nfunction extractPopularTags(lists: SharedVocabularyList[]): string[] {\n  const tagCounts = lists.reduce((acc, list) => {\n    list.tags.forEach(tag => {\n      acc[tag] = (acc[tag] || 0) + 1;\n    });\n    return acc;\n  }, {} as Record<string, number>);\n  \n  return Object.entries(tagCounts)\n    .sort(([, a], [, b]) => b - a)\n    .slice(0, 20)\n    .map(([tag]) => tag);\n}