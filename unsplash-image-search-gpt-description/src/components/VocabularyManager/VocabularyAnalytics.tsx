import React, { useState, useMemo } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  ScatterChart,\n  Scatter\n} from 'recharts';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Target,\n  Clock,\n  Calendar,\n  Brain,\n  Award,\n  Zap,\n  BarChart3,\n  PieChart as PieChartIcon,\n  Activity,\n  Users\n} from 'lucide-react';\nimport { VocabularyAnalytics, VocabularyItem, MasteryLevel } from '../../types';\nimport { useVocabulary } from '../../hooks/useVocabulary';\nimport { Card } from '../Shared/Card/Card';\nimport { Button } from '../Shared/Button/Button';\n\ninterface VocabularyAnalyticsProps {\n  className?: string;\n  timeRange?: '7d' | '30d' | '90d' | '1y' | 'all';\n}\n\nexport function VocabularyAnalyticsDashboard({\n  className = '',\n  timeRange = '30d'\n}: VocabularyAnalyticsProps) {\n  const { vocabularyItems, stats, isLoading } = useVocabulary();\n  const [selectedTab, setSelectedTab] = useState<'overview' | 'learning' | 'performance' | 'trends'>('overview');\n  const [chartType, setChartType] = useState<'line' | 'area' | 'bar'>('area');\n\n  // Calculate analytics data\n  const analytics = useMemo(() => {\n    return calculateAnalytics(vocabularyItems, timeRange);\n  }, [vocabularyItems, timeRange]);\n\n  const tabs = [\n    { id: 'overview', label: 'Overview', icon: <BarChart3 className=\"w-4 h-4\" /> },\n    { id: 'learning', label: 'Learning', icon: <Brain className=\"w-4 h-4\" /> },\n    { id: 'performance', label: 'Performance', icon: <Target className=\"w-4 h-4\" /> },\n    { id: 'trends', label: 'Trends', icon: <TrendingUp className=\"w-4 h-4\" /> }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className={`vocabulary-analytics ${className}`}>\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`vocabulary-analytics ${className}`}>\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          Learning Analytics\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Insights into your vocabulary learning journey and progress patterns.\n        </p>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 mb-6 p-1 bg-gray-100 dark:bg-gray-800 rounded-lg\">\n        {tabs.map((tab) => (\n          <button\n            key={tab.id}\n            onClick={() => setSelectedTab(tab.id as any)}\n            className={`flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n              selectedTab === tab.id\n                ? 'bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-sm'\n                : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n            }`}\n          >\n            {tab.icon}\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Overview Tab */}\n      {selectedTab === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <MetricCard\n              title=\"Learning Velocity\"\n              value={`${analytics.learningVelocity.toFixed(1)} words/day`}\n              change={+12.5}\n              icon={<TrendingUp className=\"w-5 h-5\" />}\n              color=\"blue\"\n            />\n            \n            <MetricCard\n              title=\"Retention Rate\"\n              value={`${(analytics.retentionRate * 100).toFixed(1)}%`}\n              change={+5.2}\n              icon={<Brain className=\"w-5 h-5\" />}\n              color=\"green\"\n            />\n            \n            <MetricCard\n              title=\"Study Streak\"\n              value={`${stats?.streak || 0} days`}\n              change={stats?.streak ? +1 : 0}\n              icon={<Zap className=\"w-5 h-5\" />}\n              color=\"orange\"\n            />\n            \n            <MetricCard\n              title=\"Avg. Session Time\"\n              value=\"12.5 min\"\n              change={-2.1}\n              icon={<Clock className=\"w-5 h-5\" />}\n              color=\"purple\"\n            />\n          </div>\n\n          {/* Weekly Activity Chart */}\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Weekly Activity\n              </h3>\n              <div className=\"flex gap-2\">\n                {(['line', 'area', 'bar'] as const).map((type) => (\n                  <Button\n                    key={type}\n                    variant={chartType === type ? 'primary' : 'ghost'}\n                    size=\"sm\"\n                    onClick={() => setChartType(type)}\n                  >\n                    {type}\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                {chartType === 'line' && (\n                  <LineChart data={analytics.weeklyActivity}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"wordsLearned\"\n                      stroke=\"#3b82f6\"\n                      strokeWidth={2}\n                      name=\"Words Learned\"\n                    />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"reviewsCompleted\"\n                      stroke=\"#10b981\"\n                      strokeWidth={2}\n                      name=\"Reviews Completed\"\n                    />\n                  </LineChart>\n                )}\n                \n                {chartType === 'area' && (\n                  <AreaChart data={analytics.weeklyActivity}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"wordsLearned\"\n                      stackId=\"1\"\n                      stroke=\"#3b82f6\"\n                      fill=\"#3b82f6\"\n                      fillOpacity={0.6}\n                      name=\"Words Learned\"\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"reviewsCompleted\"\n                      stackId=\"2\"\n                      stroke=\"#10b981\"\n                      fill=\"#10b981\"\n                      fillOpacity={0.6}\n                      name=\"Reviews Completed\"\n                    />\n                  </AreaChart>\n                )}\n                \n                {chartType === 'bar' && (\n                  <BarChart data={analytics.weeklyActivity}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"wordsLearned\" fill=\"#3b82f6\" name=\"Words Learned\" />\n                    <Bar dataKey=\"reviewsCompleted\" fill=\"#10b981\" name=\"Reviews Completed\" />\n                  </BarChart>\n                )}\n              </ResponsiveContainer>\n            </div>\n          </Card>\n\n          {/* Category Progress */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Category Progress\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {Object.entries(analytics.categoryProgress).map(([category, progress]) => (\n                <div key={category}>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      {category}\n                    </span>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {progress.mastered}/{progress.total} ({((progress.mastered / progress.total) * 100).toFixed(0)}%)\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${(progress.mastered / progress.total) * 100}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                    Avg. Accuracy: {(progress.accuracy * 100).toFixed(1)}%\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Learning Tab */}\n      {selectedTab === 'learning' && (\n        <div className=\"space-y-6\">\n          {/* Difficulty Distribution */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Difficulty Distribution\n            </h3>\n            \n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={Object.entries(analytics.difficultyDistribution).map(([level, count]) => ({\n                  difficulty: `Level ${level}`,\n                  count\n                }))}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"difficulty\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#8b5cf6\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n\n          {/* Mastery Timeline */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Learning Progress Over Time\n            </h3>\n            \n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={generateMasteryTimeline(vocabularyItems)}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"new\"\n                    stackId=\"1\"\n                    stroke=\"#6b7280\"\n                    fill=\"#6b7280\"\n                    name=\"New\"\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"learning\"\n                    stackId=\"1\"\n                    stroke=\"#f59e0b\"\n                    fill=\"#f59e0b\"\n                    name=\"Learning\"\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"review\"\n                    stackId=\"1\"\n                    stroke=\"#3b82f6\"\n                    fill=\"#3b82f6\"\n                    name=\"Review\"\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"mastered\"\n                    stackId=\"1\"\n                    stroke=\"#10b981\"\n                    fill=\"#10b981\"\n                    name=\"Mastered\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Performance Tab */}\n      {selectedTab === 'performance' && (\n        <div className=\"space-y-6\">\n          {/* Accuracy vs Difficulty Scatter */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Accuracy vs Difficulty\n            </h3>\n            \n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <ScatterChart data={vocabularyItems.map(item => ({\n                  difficulty: item.difficulty,\n                  accuracy: item.timesReviewed > 0 ? (item.timesCorrect / item.timesReviewed) * 100 : 0,\n                  masteryLevel: item.masteryLevel\n                })).filter(item => item.accuracy > 0)}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"difficulty\" type=\"number\" domain={[1, 10]} name=\"Difficulty\" />\n                  <YAxis dataKey=\"accuracy\" type=\"number\" domain={[0, 100]} name=\"Accuracy %\" />\n                  <Tooltip />\n                  <Scatter dataKey=\"accuracy\" fill=\"#3b82f6\" />\n                </ScatterChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n\n          {/* Review Performance */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Review Performance Trends\n            </h3>\n            \n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={analytics.weeklyActivity}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"accuracy\"\n                    stroke=\"#10b981\"\n                    strokeWidth={2}\n                    name=\"Accuracy %\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Trends Tab */}\n      {selectedTab === 'trends' && (\n        <div className=\"space-y-6\">\n          {/* Streak History */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Study Streak History\n            </h3>\n            \n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={analytics.streakHistory}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"streak\"\n                    stroke=\"#f59e0b\"\n                    fill=\"#f59e0b\"\n                    fillOpacity={0.6}\n                    name=\"Streak Days\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </Card>\n\n          {/* Learning Insights */}\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Learning Insights\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <TrendingUp className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                  <div>\n                    <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">\n                      Strong Learning Velocity\n                    </h4>\n                    <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                      You're learning {analytics.learningVelocity.toFixed(1)} words per day on average.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-4 bg-green-50 dark:bg-green-900 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <Brain className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                  <div>\n                    <h4 className=\"font-medium text-green-900 dark:text-green-100\">\n                      Excellent Retention\n                    </h4>\n                    <p className=\"text-sm text-green-700 dark:text-green-300\">\n                      Your retention rate is {(analytics.retentionRate * 100).toFixed(1)}%, which is above average.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <Target className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400\" />\n                  <div>\n                    <h4 className=\"font-medium text-yellow-900 dark:text-yellow-100\">\n                      Recommendation\n                    </h4>\n                    <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                      Consider focusing more on Level {getMostChallengingLevel(analytics.difficultyDistribution)} words to improve overall proficiency.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Helper Components\ninterface MetricCardProps {\n  title: string;\n  value: string;\n  change: number;\n  icon: React.ReactNode;\n  color: 'blue' | 'green' | 'orange' | 'purple';\n}\n\nfunction MetricCard({ title, value, change, icon, color }: MetricCardProps) {\n  const colorClasses = {\n    blue: 'bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400',\n    green: 'bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-400',\n    orange: 'bg-orange-100 text-orange-600 dark:bg-orange-900 dark:text-orange-400',\n    purple: 'bg-purple-100 text-purple-600 dark:bg-purple-900 dark:text-purple-400'\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{value}</p>\n        </div>\n        <div className={`p-3 rounded-full ${colorClasses[color]}`}>\n          {icon}\n        </div>\n      </div>\n      <div className=\"mt-4 flex items-center text-sm\">\n        {change > 0 ? (\n          <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n        ) : (\n          <TrendingDown className=\"w-4 h-4 text-red-500 mr-1\" />\n        )}\n        <span className={change > 0 ? 'text-green-600' : 'text-red-600'}>\n          {change > 0 ? '+' : ''}{change}%\n        </span>\n        <span className=\"text-gray-600 dark:text-gray-400 ml-1\">from last period</span>\n      </div>\n    </Card>\n  );\n}\n\n// Helper Functions\nfunction calculateAnalytics(items: VocabularyItem[], timeRange: string): VocabularyAnalytics {\n  const now = new Date();\n  const daysMap = { '7d': 7, '30d': 30, '90d': 90, '1y': 365, 'all': Infinity };\n  const days = daysMap[timeRange as keyof typeof daysMap] || 30;\n  \n  const cutoffDate = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));\n  const recentItems = items.filter(item => new Date(item.createdAt) >= cutoffDate);\n  \n  // Calculate learning velocity\n  const learningVelocity = days === Infinity ? 0 : recentItems.length / days;\n  \n  // Calculate retention rate\n  const masteredCount = items.filter(item => item.masteryLevel === MasteryLevel.MASTERED).length;\n  const retentionRate = items.length > 0 ? masteredCount / items.length : 0;\n  \n  // Calculate difficulty distribution\n  const difficultyDistribution = items.reduce((acc, item) => {\n    acc[item.difficulty] = (acc[item.difficulty] || 0) + 1;\n    return acc;\n  }, {} as Record<number, number>);\n  \n  // Calculate category progress\n  const categoryProgress = items.reduce((acc, item) => {\n    const category = item.category || 'Uncategorized';\n    if (!acc[category]) {\n      acc[category] = { total: 0, mastered: 0, accuracy: 0 };\n    }\n    acc[category].total++;\n    if (item.masteryLevel === MasteryLevel.MASTERED) {\n      acc[category].mastered++;\n    }\n    // Calculate accuracy for category\n    const accuracy = item.timesReviewed > 0 ? item.timesCorrect / item.timesReviewed : 0;\n    acc[category].accuracy = (acc[category].accuracy + accuracy) / acc[category].total;\n    return acc;\n  }, {} as Record<string, { total: number; mastered: number; accuracy: number }>);\n  \n  // Generate weekly activity (mock data)\n  const weeklyActivity = Array.from({ length: Math.min(days, 30) }, (_, i) => {\n    const date = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000));\n    return {\n      date: date.toISOString().split('T')[0],\n      wordsLearned: Math.floor(Math.random() * 5) + 1,\n      reviewsCompleted: Math.floor(Math.random() * 10) + 5,\n      accuracy: 0.7 + Math.random() * 0.3\n    };\n  }).reverse();\n  \n  // Generate streak history (mock data)\n  const streakHistory = Array.from({ length: Math.min(days, 30) }, (_, i) => {\n    const date = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000));\n    return {\n      date: date.toISOString().split('T')[0],\n      streak: Math.max(0, 10 - Math.floor(Math.random() * 5))\n    };\n  }).reverse();\n  \n  return {\n    learningVelocity,\n    retentionRate,\n    difficultyDistribution,\n    categoryProgress,\n    weeklyActivity,\n    streakHistory\n  };\n}\n\nfunction generateMasteryTimeline(items: VocabularyItem[]) {\n  // Group items by creation date and calculate mastery distribution\n  const timeline = items.reduce((acc, item) => {\n    const date = item.createdAt.toISOString().split('T')[0];\n    if (!acc[date]) {\n      acc[date] = { new: 0, learning: 0, review: 0, mastered: 0 };\n    }\n    acc[date][item.masteryLevel]++;\n    return acc;\n  }, {} as Record<string, Record<MasteryLevel, number>>);\n  \n  return Object.entries(timeline)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([date, counts]) => ({ date, ...counts }));\n}\n\nfunction getMostChallengingLevel(distribution: Record<number, number>): number {\n  return parseInt(Object.entries(distribution)\n    .sort(([, a], [, b]) => b - a)\n    .filter(([level]) => parseInt(level) > 5)\n    [0]?.[0] || '5');\n}