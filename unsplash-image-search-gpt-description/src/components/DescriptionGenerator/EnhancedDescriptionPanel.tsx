import React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport { \n  XMarkIcon, \n  SparklesIcon, \n  ArrowPathIcon,\n  SpeakerWaveIcon,\n  DocumentArrowDownIcon,\n  ClipboardIcon,\n  TrashIcon,\n  CogIcon,\n  ChartBarIcon\n} from '@heroicons/react/24/outline';\nimport { Image, DescriptionStyle } from '../../types';\nimport { Button } from '../Shared/Button/Button';\nimport { StyleSelector } from './StyleSelector';\nimport { ContextInput } from './ContextInput';\nimport { VocabularyHighlighter } from './VocabularyHighlighter';\nimport { useAIGeneration } from '../../hooks/useAIGeneration';\nimport { useVocabulary } from '../../hooks/useVocabulary';\nimport { useOfflineDescriptions } from '../../hooks/useOfflineDescriptions';\nimport { useSpacedRepetition } from '../../hooks/useSpacedRepetition';\nimport { SpacedRepetitionQuiz } from '../VocabularyManager/SpacedRepetitionQuiz';\nimport { OfflineDescriptionManager } from '../PWA/OfflineDescriptionManager';\nimport { \n  MemoizedStreamingText,\n  OptimizedTextHighlighter,\n  usePerformanceMetrics,\n  DescriptionOptimizationContext\n} from './PerformanceOptimizations';\nimport toast from 'react-hot-toast';\n\ninterface EnhancedDescriptionPanelProps {\n  image: Image | null;\n  onClose: () => void;\n  isOpen: boolean;\n  className?: string;\n}\n\nexport const EnhancedDescriptionPanel: React.FC<EnhancedDescriptionPanelProps> = ({\n  image,\n  onClose,\n  isOpen,\n  className = '',\n}) => {\n  // State management\n  const [selectedStyle, setSelectedStyle] = useState<DescriptionStyle>('academic');\n  const [showVocabularyHighlight, setShowVocabularyHighlight] = useState(true);\n  const [contextNotes, setContextNotes] = useState('');\n  const [focusAreas, setFocusAreas] = useState<string[]>([]);\n  const [vocabularyLevel, setVocabularyLevel] = useState<1 | 2 | 3 | 4 | 5>(3);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [showQuiz, setShowQuiz] = useState(false);\n  const [showOfflineManager, setShowOfflineManager] = useState(false);\n  const [showPerformanceMetrics, setShowPerformanceMetrics] = useState(false);\n  \n  // Hooks\n  const { \n    description, \n    vocabulary, \n    isGenerating, \n    error, \n    tokenCount, \n    processingTime, \n    progress, \n    generate, \n    cancel,\n    clearCache\n  } = useAIGeneration();\n  \n  const { addWord } = useVocabulary();\n  const { getCachedDescription, cacheDescription } = useOfflineDescriptions();\n  const { dueCount, newCount } = useSpacedRepetition();\n  const { metrics, measureRender, measureMemory } = usePerformanceMetrics();\n\n  // Optimization context\n  const optimizationConfig = useMemo(() => ({\n    enableVirtualization: vocabulary.length > 50,\n    chunkSize: 100,\n    debounceDelay: 300,\n    enablePerformanceMonitoring: showPerformanceMetrics,\n  }), [vocabulary.length, showPerformanceMetrics]);\n\n  // Memoized handlers to prevent unnecessary re-renders\n  const handleGenerate = useCallback(() => {\n    if (!image) return;\n    \n    measureRender('generateDescription', () => {\n      generate(image.id, selectedStyle, {\n        context: contextNotes,\n        focusAreas,\n        vocabularyLevel,\n        forceRefresh: false,\n      });\n    });\n  }, [image, selectedStyle, contextNotes, focusAreas, vocabularyLevel, generate, measureRender]);\n\n  const handleRegenerateWithNewSettings = useCallback(() => {\n    if (!image) return;\n    \n    generate(image.id, selectedStyle, {\n      context: contextNotes,\n      focusAreas,\n      vocabularyLevel,\n      forceRefresh: true,\n    });\n  }, [image, selectedStyle, contextNotes, focusAreas, vocabularyLevel, generate]);\n\n  const handleWordSelect = useCallback(async (word: string, definition: string) => {\n    if (!image) return;\n    \n    try {\n      await addWord({\n        word,\n        definition,\n        language: 'en',\n        difficulty_level: vocabularyLevel,\n        context: description.substring(0, 200),\n        image_id: image.id,\n        learned: false,\n        review_count: 0,\n      });\n      toast.success(`Added \"${word}\" to vocabulary`);\n    } catch (error) {\n      console.error('Failed to add word:', error);\n      toast.error('Failed to add word to vocabulary');\n    }\n  }, [image, description, vocabularyLevel, addWord]);\n\n  const handleSpeakDescription = useCallback(() => {\n    if (!description || isSpeaking) return;\n    \n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(description);\n      utterance.rate = 0.8;\n      utterance.volume = 0.8;\n      utterance.onstart = () => setIsSpeaking(true);\n      utterance.onend = () => setIsSpeaking(false);\n      utterance.onerror = () => {\n        setIsSpeaking(false);\n        toast.error('Speech synthesis failed');\n      };\n      \n      speechSynthesis.speak(utterance);\n    } else {\n      toast.error('Speech synthesis not supported in this browser');\n    }\n  }, [description, isSpeaking]);\n\n  const handleStopSpeaking = useCallback(() => {\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  }, []);\n\n  const handleCopyToClipboard = useCallback(() => {\n    if (!description) return;\n    \n    navigator.clipboard.writeText(description).then(() => {\n      toast.success('Description copied to clipboard');\n    }).catch(() => {\n      toast.error('Failed to copy to clipboard');\n    });\n  }, [description]);\n\n  const handleExportDescription = useCallback((format: 'txt' | 'md' | 'json') => {\n    if (!description || !image) return;\n    \n    let content = '';\n    let mimeType = '';\n    let extension = '';\n    \n    switch (format) {\n      case 'txt':\n        content = description;\n        mimeType = 'text/plain';\n        extension = 'txt';\n        break;\n      case 'md':\n        content = `# Image Description\\n\\n![Image](${image.urls.regular})\\n\\n**Style:** ${selectedStyle}\\n**Generated:** ${new Date().toLocaleString()}\\n\\n## Description\\n\\n${description}\\n\\n## Vocabulary\\n\\n${vocabulary.map(word => `- **${word.word}**: ${word.definition}`).join('\\n')}\\n\\n## Context\\n\\n${contextNotes || 'No additional context provided'}\\n\\n## Focus Areas\\n\\n${focusAreas.length ? focusAreas.join(', ') : 'No specific focus areas'}`;\n        mimeType = 'text/markdown';\n        extension = 'md';\n        break;\n      case 'json':\n        content = JSON.stringify({\n          imageId: image.id,\n          imageUrl: image.urls.regular,\n          style: selectedStyle,\n          description,\n          vocabulary,\n          context: contextNotes,\n          focusAreas,\n          tokenCount,\n          processingTime,\n          generated: new Date().toISOString(),\n        }, null, 2);\n        mimeType = 'application/json';\n        extension = 'json';\n        break;\n    }\n    \n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `description-${image.id}-${selectedStyle}.${extension}`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success(`Description exported as ${format.toUpperCase()}`);\n  }, [description, vocabulary, image, selectedStyle, contextNotes, focusAreas, tokenCount, processingTime]);\n\n  // Auto-generation and state management\n  useEffect(() => {\n    if (image && isOpen) {\n      // Check for cached description first\n      const cached = getCachedDescription(image.id, selectedStyle, contextNotes, focusAreas);\n      if (cached) {\n        toast.info('Loaded cached description');\n        return;\n      }\n      \n      // Auto-generate description\n      handleGenerate();\n    }\n    \n    // Stop speaking when image changes\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  }, [image?.id, isOpen, selectedStyle, contextNotes, focusAreas]);\n\n  // Cache completed descriptions\n  useEffect(() => {\n    if (description && !isGenerating && image && vocabulary.length > 0) {\n      const descriptionToCache = {\n        id: `${image.id}_${selectedStyle}_${Date.now()}`,\n        imageId: image.id,\n        imageUrl: image.urls.regular,\n        style: selectedStyle,\n        description,\n        vocabulary,\n        context: contextNotes,\n        focusAreas,\n        tokenCount,\n        processingTime,\n        timestamp: Date.now(),\n        synced: true,\n        version: 1,\n      };\n      \n      cacheDescription(descriptionToCache);\n    }\n  }, [description, isGenerating, image, vocabulary, selectedStyle, contextNotes, focusAreas, tokenCount, processingTime, cacheDescription]);\n\n  // Performance monitoring\n  useEffect(() => {\n    if (showPerformanceMetrics) {\n      const interval = setInterval(measureMemory, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [showPerformanceMetrics, measureMemory]);\n\n  // Stop speaking when panel closes\n  useEffect(() => {\n    if (!isOpen && 'speechSynthesis' in window) {\n      speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  }, [isOpen]);\n\n  if (!isOpen || !image) {\n    return null;\n  }\n\n  return (\n    <DescriptionOptimizationContext.Provider value={optimizationConfig}>\n      <div className={`fixed inset-0 z-50 overflow-hidden ${className}`}>\n        {/* Backdrop */}\n        <div \n          className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={onClose}\n          aria-hidden=\"true\"\n        />\n        \n        {/* Panel */}\n        <div className=\"absolute right-0 top-0 h-full w-full max-w-4xl bg-white dark:bg-gray-900 shadow-2xl\">\n          <div className=\"flex flex-col h-full\">\n            {/* Enhanced Header */}\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20\">\n              <div className=\"flex items-center space-x-3\">\n                <SparklesIcon className=\"w-6 h-6 text-indigo-600 dark:text-indigo-400\" />\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                    AI Description Generator\n                  </h2>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                    {dueCount > 0 && (\n                      <span className=\"flex items-center space-x-1\">\n                        <span className=\"w-2 h-2 bg-orange-500 rounded-full\" />\n                        <span>{dueCount} due for review</span>\n                      </span>\n                    )}\n                    {newCount > 0 && (\n                      <span className=\"flex items-center space-x-1\">\n                        <span className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                        <span>{newCount} new words</span>\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                {(dueCount > 0 || newCount > 0) && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowQuiz(true)}\n                    className=\"text-indigo-600 border-indigo-200 hover:bg-indigo-50\"\n                  >\n                    Quiz ({dueCount + newCount})\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowOfflineManager(true)}\n                  className=\"p-2\"\n                  aria-label=\"Manage offline descriptions\"\n                >\n                  <DocumentArrowDownIcon className=\"w-5 h-5\" />\n                </Button>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowPerformanceMetrics(!showPerformanceMetrics)}\n                  className=\"p-2\"\n                  aria-label=\"Toggle performance metrics\"\n                >\n                  <ChartBarIcon className=\"w-5 h-5\" />\n                </Button>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onClose}\n                  className=\"p-2\"\n                  aria-label=\"Close description panel\"\n                >\n                  <XMarkIcon className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Performance Metrics */}\n            {showPerformanceMetrics && (\n              <div className=\"px-6 py-3 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"grid grid-cols-4 gap-4 text-xs\">\n                  <div className=\"text-center\">\n                    <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                      {metrics.renderTime.toFixed(1)}ms\n                    </div>\n                    <div className=\"text-gray-500\">Render Time</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                      {(metrics.memoryUsage / 1024 / 1024).toFixed(1)}MB\n                    </div>\n                    <div className=\"text-gray-500\">Memory</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                      {tokenCount}\n                    </div>\n                    <div className=\"text-gray-500\">Tokens</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                      {processingTime}ms\n                    </div>\n                    <div className=\"text-gray-500\">Processing</div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Scrollable Content */}\n            <div className=\"flex-1 overflow-y-auto\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 p-6\">\n                {/* Left Column: Controls */}\n                <div className=\"space-y-6\">\n                  {/* Image Preview */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-4\">Image</h3>\n                    <div className=\"relative aspect-video rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800\">\n                      <img\n                        src={image.urls.regular}\n                        alt={image.alt_description || 'Selected image'}\n                        className=\"w-full h-full object-cover\"\n                        loading=\"lazy\"\n                      />\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-3\">\n                        <div className=\"text-white text-sm\">\n                          <div className=\"font-medium\">\n                            by {image.user?.name || image.user?.username}\n                          </div>\n                          <div className=\"text-gray-300 text-xs\">\n                            {image.width} × {image.height}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Style Selector */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                    <StyleSelector\n                      selectedStyle={selectedStyle}\n                      onStyleChange={setSelectedStyle}\n                      vocabularyLevel={vocabularyLevel}\n                      onVocabularyLevelChange={setVocabularyLevel}\n                      disabled={isGenerating}\n                    />\n                  </div>\n\n                  {/* Context Input */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                    <ContextInput\n                      value={contextNotes}\n                      onChange={setContextNotes}\n                      focusAreas={focusAreas}\n                      onFocusAreasChange={setFocusAreas}\n                      disabled={isGenerating}\n                      suggestions={[\n                        \"Focus on the emotional impact and mood\",\n                        \"Analyze the technical photography aspects\",\n                        \"Describe for a beginner audience\",\n                        \"Emphasize the artistic composition\",\n                        \"Include historical or cultural context\"\n                      ]}\n                    />\n                  </div>\n                </div>\n\n                {/* Right Column: Results */}\n                <div className=\"space-y-6\">\n                  {/* Generation Controls */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\n                          Generate Description\n                        </h3>\n                        {!isGenerating && description && (\n                          <div className=\"flex items-center space-x-2\">\n                            <button\n                              onClick={isSpeaking ? handleStopSpeaking : handleSpeakDescription}\n                              className=\"p-2 text-gray-400 hover:text-gray-600 rounded\"\n                              aria-label={isSpeaking ? 'Stop speaking' : 'Read aloud'}\n                            >\n                              <SpeakerWaveIcon className=\"w-4 h-4\" />\n                            </button>\n                            <button\n                              onClick={handleCopyToClipboard}\n                              className=\"p-2 text-gray-400 hover:text-gray-600 rounded\"\n                              aria-label=\"Copy to clipboard\"\n                            >\n                              <ClipboardIcon className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex space-x-3\">\n                        <Button\n                          onClick={handleGenerate}\n                          disabled={isGenerating}\n                          loading={isGenerating}\n                          className=\"flex-1\"\n                        >\n                          {isGenerating ? 'Generating...' : 'Generate Description'}\n                        </Button>\n                        \n                        {isGenerating && (\n                          <Button\n                            variant=\"outline\"\n                            onClick={cancel}\n                            className=\"px-4\"\n                          >\n                            Cancel\n                          </Button>\n                        )}\n                        \n                        {description && !isGenerating && (\n                          <Button\n                            variant=\"outline\"\n                            onClick={handleRegenerateWithNewSettings}\n                            className=\"px-4\"\n                            aria-label=\"Regenerate with current settings\"\n                          >\n                            <ArrowPathIcon className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                      </div>\n                      \n                      {/* Progress bar */}\n                      {isGenerating && (\n                        <div className=\"space-y-2\">\n                          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                            <div \n                              className=\"bg-indigo-600 h-2 rounded-full transition-all duration-300\"\n                              style={{ width: `${progress}%` }}\n                            />\n                          </div>\n                          <div className=\"text-xs text-gray-500 text-center\">\n                            {progress.toFixed(1)}% complete\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n                      <div className=\"text-red-700 dark:text-red-400 text-sm\">\n                        <strong>Error:</strong> {error.message}\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handleGenerate}\n                        className=\"mt-2\"\n                      >\n                        Try Again\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Description Display */}\n                  {(description || isGenerating) && (\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\n                          Description\n                        </h3>\n                        <label className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={showVocabularyHighlight}\n                            onChange={(e) => setShowVocabularyHighlight(e.target.checked)}\n                            className=\"rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700\"\n                          />\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            Highlight vocabulary\n                          </span>\n                        </label>\n                      </div>\n\n                      <div className=\"bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4 min-h-[200px]\">\n                        {showVocabularyHighlight && !isGenerating ? (\n                          <VocabularyHighlighter\n                            text={description}\n                            extractedVocabulary={vocabulary}\n                            onWordSelect={handleWordSelect}\n                            isStreaming={isGenerating}\n                            showDifficultyColors={true}\n                            enableRealTimeExtraction={true}\n                          />\n                        ) : (\n                          <MemoizedStreamingText\n                            content={description}\n                            isStreaming={isGenerating}\n                            className=\"text-gray-900 dark:text-gray-100\"\n                          />\n                        )}\n                      </div>\n\n                      {/* Statistics */}\n                      {description && !isGenerating && (\n                        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                          <div className=\"grid grid-cols-3 gap-4 text-sm text-gray-600 dark:text-gray-400\">\n                            <div className=\"text-center\">\n                              <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                                {description.split(/\\s+/).length}\n                              </div>\n                              <div>words</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                                {vocabulary.length}\n                              </div>\n                              <div>vocabulary</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                                ~{Math.ceil(description.split(/\\s+/).length / 200)}\n                              </div>\n                              <div>min read</div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Export Options */}\n                  {description && !isGenerating && (\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                      <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-4\">\n                        Export & Actions\n                      </h3>\n                      <div className=\"grid grid-cols-3 gap-3\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleExportDescription('txt')}\n                          className=\"text-xs\"\n                        >\n                          Export TXT\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleExportDescription('md')}\n                          className=\"text-xs\"\n                        >\n                          Export MD\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleExportDescription('json')}\n                          className=\"text-xs\"\n                        >\n                          Export JSON\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Modals */}\n      <SpacedRepetitionQuiz\n        isOpen={showQuiz}\n        onClose={() => setShowQuiz(false)}\n      />\n      \n      <OfflineDescriptionManager\n        isOpen={showOfflineManager}\n        onClose={() => setShowOfflineManager(false)}\n      />\n    </DescriptionOptimizationContext.Provider>\n  );\n};"