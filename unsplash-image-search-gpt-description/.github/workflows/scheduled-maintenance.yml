name: Scheduled Maintenance

on:
  schedule:
    # Daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Daily dependency updates check
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Check for npm updates
      run: |
        npm outdated --json > npm-outdated.json || true
        npm audit --json > npm-audit.json || true

    - name: Check for Python updates
      run: |
        pip list --outdated --format=json > pip-outdated.json || true
        pip-audit --format=json --output=pip-audit.json || true

    - name: Create dependency update PR
      uses: peter-evans/create-pull-request@v5
      if: always()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: automated/dependency-updates
        title: '🔄 Automated dependency updates'
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated dependency updates detected during scheduled maintenance.
          
          ### Changed Files
          - Node.js dependencies report
          - Python dependencies report
          - Security audit results
          
          ### Action Required
          - [ ] Review security vulnerabilities
          - [ ] Test critical dependency updates
          - [ ] Update package.json/requirements.txt if needed
          
          Auto-generated by scheduled maintenance workflow.
        commit-message: 'chore: automated dependency updates check'
        delete-branch: true

  # Security scanning
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements-dev.txt

    - name: Run comprehensive security audit
      run: |
        # Node.js security
        npm audit --audit-level=low --json > npm-security-audit.json
        
        # Python security
        bandit -r . -f json -o bandit-security-report.json
        safety check --json > safety-audit.json
        pip-audit --format=json --output=pip-security-audit.json

    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'https://unsplash-gpt-staging.vercel.app'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-reports
        path: |
          *-security-audit.json
          *-audit.json
          bandit-security-report.json

    - name: Create security issue if vulnerabilities found
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          // Check for critical vulnerabilities
          let criticalVulns = [];
          
          try {
            const npmAudit = JSON.parse(fs.readFileSync('npm-security-audit.json'));
            if (npmAudit.metadata?.vulnerabilities?.critical > 0) {
              criticalVulns.push(`${npmAudit.metadata.vulnerabilities.critical} critical npm vulnerabilities`);
            }
          } catch (e) {}
          
          if (criticalVulns.length > 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Security Vulnerabilities Detected',
              body: `## Critical Security Alert\n\nThe following critical vulnerabilities were detected:\n\n${criticalVulns.map(v => `- ${v}`).join('\n')}\n\n**Action Required:** Please review and address these vulnerabilities immediately.\n\nGenerated by: Security Audit Workflow`,
              labels: ['security', 'critical', 'automated']
            });
          }

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        environment: [staging, production]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Lighthouse audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://unsplash-gpt-${{ matrix.environment }}.vercel.app
          https://unsplash-gpt-${{ matrix.environment }}.vercel.app/search
          https://unsplash-gpt-${{ matrix.environment }}.vercel.app/vocabulary
        configPath: './lighthouse-ci.js'
        temporaryPublicStorage: true
        uploadArtifacts: true
      continue-on-error: true

    - name: Check Core Web Vitals
      run: |
        curl -s "https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=https://unsplash-gpt-${{ matrix.environment }}.vercel.app&category=performance&strategy=mobile" > performance-mobile.json
        curl -s "https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=https://unsplash-gpt-${{ matrix.environment }}.vercel.app&category=performance&strategy=desktop" > performance-desktop.json

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports-${{ matrix.environment }}
        path: |
          performance-*.json
          lhci-out/

  # Database maintenance
  database-maintenance:
    name: Database Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.schedule == '0 2 * * *' # Only on scheduled run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1

    - name: Database health check
      run: |
        supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
        
        # Check database connections
        supabase db status
        
        # Run database diagnostics
        echo "SELECT 
          schemaname,
          tablename,
          attname,
          n_distinct,
          correlation
        FROM pg_stats 
        LIMIT 10;" | supabase db query
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    - name: Backup database
      run: |
        # Create backup
        supabase db dump --file=backup-$(date +%Y%m%d).sql
        
        # Store backup (in a real scenario, upload to cloud storage)
        echo "Database backup created: backup-$(date +%Y%m%d).sql"
      continue-on-error: true

    - name: Clean up old data
      run: |
        # Clean up test data older than 30 days (development only)
        echo "
        DELETE FROM sessions 
        WHERE created_at < NOW() - INTERVAL '30 days' 
        AND user_id IN (
          SELECT id FROM profiles WHERE email LIKE '%+test@%'
        );
        " | supabase db query --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      continue-on-error: true

  # Health check and uptime monitoring
  health-monitoring:
    name: Health & Uptime Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    strategy:
      matrix:
        environment: [staging, production]
        endpoint: 
          - '/'
          - '/api/health'
          - '/api/auth/status'

    steps:
    - name: Health check endpoint
      run: |
        URL="https://unsplash-gpt-${{ matrix.environment }}.vercel.app${{ matrix.endpoint }}"
        
        # Check response time and status
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$URL")
        STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}" "$URL")
        
        echo "URL: $URL"
        echo "Status Code: $STATUS_CODE"
        echo "Response Time: ${RESPONSE_TIME}s"
        
        # Alert if response time > 3 seconds or status != 200
        if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )) || [ "$STATUS_CODE" != "200" ]; then
          echo "::warning::Performance issue detected - $URL responded in ${RESPONSE_TIME}s with status $STATUS_CODE"
          exit 1
        fi

    - name: Create performance alert
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `⚡ Performance Alert: ${{ matrix.environment }} - ${{ matrix.endpoint }}`,
            body: `## Performance Issue Detected\n\n**Environment:** ${{ matrix.environment }}\n**Endpoint:** ${{ matrix.endpoint }}\n**Time:** ${new Date().toISOString()}\n\n**Issue:** Endpoint is responding slowly or returning errors.\n\n**Action Required:** Investigate performance bottleneck or service availability.\n\nGenerated by: Health Monitoring Workflow`,
            labels: ['performance', 'monitoring', 'automated', '${{ matrix.environment }}']
          });

  # Weekly comprehensive report
  weekly-report:
    name: Weekly Health Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * 1' # Monday at 2 AM
    needs: [dependency-updates, security-audit, performance-monitoring, database-maintenance, health-monitoring]
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate weekly report
      uses: actions/github-script@v7
      with:
        script: |
          const report = `
          # 📊 Weekly Health Report
          
          Generated: ${new Date().toISOString()}
          
          ## 🔒 Security Status
          - Security audit completed
          - Dependency updates checked
          - OWASP scan performed
          
          ## ⚡ Performance Status
          - Lighthouse audits completed for staging and production
          - Core Web Vitals monitored
          - Response time checks passed
          
          ## 🗄️ Database Status
          - Database health check completed
          - Backup created successfully
          - Old test data cleaned up
          
          ## 📈 Metrics Summary
          Check the Actions artifacts for detailed reports.
          
          ## 🎯 Action Items
          - Review any security vulnerabilities
          - Monitor performance trends
          - Update dependencies as needed
          
          ---
          *Automated by scheduled maintenance workflow*
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📊 Weekly Health Report - ${new Date().toISOString().split('T')[0]}`,
            body: report,
            labels: ['report', 'automated', 'weekly']
          });