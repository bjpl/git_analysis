name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            asset_name: unsplash-gpt-tool-windows
            asset_suffix: .exe
            pyinstaller_options: --onefile --windowed --name unsplash-gpt-tool
          - os: ubuntu-latest  
            asset_name: unsplash-gpt-tool-linux
            asset_suffix: ''
            pyinstaller_options: --onefile --name unsplash-gpt-tool
          - os: macos-latest
            asset_name: unsplash-gpt-tool-macos
            asset_suffix: .app
            pyinstaller_options: --onefile --windowed --name unsplash-gpt-tool

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create version info
      shell: bash
      run: |
        # Extract version from tag or input
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "Building version: ${VERSION}"
        
        # Create version file
        cat > version_info.py << EOF
        __version__ = "${VERSION}"
        __build_date__ = "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        __build_platform__ = "${{ matrix.os }}"
        EOF

    - name: Build executable
      run: |
        pyinstaller ${{ matrix.pyinstaller_options }} \
          --add-data "data;data" \
          --add-data "version_info.py;." \
          --icon="assets/icon.ico" \
          --distpath dist \
          --workpath build \
          --specpath . \
          main.py

    - name: Test executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Basic smoke test
        echo "Testing Windows executable..."
        ./dist/unsplash-gpt-tool.exe --help || echo "Help test completed"
      continue-on-error: true

    - name: Test executable (Linux)
      if: matrix.os == 'ubuntu-latest' 
      run: |
        # Basic smoke test
        echo "Testing Linux executable..."
        chmod +x ./dist/unsplash-gpt-tool
        ./dist/unsplash-gpt-tool --help || echo "Help test completed"
      continue-on-error: true

    - name: Test executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Basic smoke test
        echo "Testing macOS executable..."
        chmod +x ./dist/unsplash-gpt-tool.app/Contents/MacOS/unsplash-gpt-tool
        ./dist/unsplash-gpt-tool.app/Contents/MacOS/unsplash-gpt-tool --help || echo "Help test completed"
      continue-on-error: true

    - name: Create distribution archive
      shell: bash
      run: |
        cd dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a -tzip "${{ matrix.asset_name }}-${{ env.VERSION }}.zip" unsplash-gpt-tool.exe
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          zip -r "${{ matrix.asset_name }}-${{ env.VERSION }}.zip" unsplash-gpt-tool.app
        else
          tar -czf "${{ matrix.asset_name }}-${{ env.VERSION }}.tar.gz" unsplash-gpt-tool
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}-${{ env.VERSION }}
        path: |
          dist/${{ matrix.asset_name }}-${{ env.VERSION }}.*
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release-assets

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "Generating changelog from $LAST_TAG to ${{ env.VERSION }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          echo "No previous tag found, generating changelog from first commit"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        # Create release notes
        cat > RELEASE_NOTES.md << EOF
        # Release ${{ env.VERSION }}
        
        ## What's Changed
        
        $CHANGELOG
        
        ## Downloads
        
        Choose the appropriate version for your operating system:
        
        - **Windows**: \`unsplash-gpt-tool-windows-${{ env.VERSION }}.zip\`
        - **macOS**: \`unsplash-gpt-tool-macos-${{ env.VERSION }}.zip\` 
        - **Linux**: \`unsplash-gpt-tool-linux-${{ env.VERSION }}.tar.gz\`
        
        ## Installation
        
        1. Download the appropriate file for your operating system
        2. Extract the archive
        3. Run the executable
        4. Follow the setup wizard to configure your API keys
        
        ## Requirements
        
        - Unsplash API key (free at https://unsplash.com/developers)
        - OpenAI API key (https://platform.openai.com/api-keys)
        
        ## Support
        
        If you encounter any issues, please report them at: https://github.com/${{ github.repository }}/issues
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(env.VERSION, '-') }}
        files: |
          release-assets/*/*
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-deployment:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
    - name: Release Success
      if: needs.create-release.result == 'success'
      run: |
        echo "‚úÖ Release ${{ env.VERSION }} completed successfully!"
        echo "üéâ Artifacts uploaded to GitHub Releases"
        
    - name: Release Failed  
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ env.VERSION }} failed!"
        echo "Please check the logs and try again"
        exit 1