name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black mypy types-requests

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: black --check --diff .

    - name: Type check with mypy
      run: mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Allow type checking failures for now

    - name: Test with pytest (Linux with xvfb)
      if: matrix.os == 'ubuntu-latest'
      run: |
        xvfb-run -a pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing
      env:
        DISPLAY: :99

    - name: Test with pytest (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing || echo "Tests completed with issues"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security linter
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Run safety check
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-executable:
    name: Build Executable (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller main.spec
        # Test the executable
        ./dist/main.exe --version || echo "Version check failed"

    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller main.spec
        # Test the executable
        ./dist/main --version || echo "Version check failed"

    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller main.spec
        # Test the executable  
        ./dist/main --version || echo "Version check failed"

    - name: Upload executable artifact
      uses: actions/upload-artifact@v3
      with:
        name: executable-${{ matrix.os }}
        path: |
          dist/
          !dist/**/*.pdb
        retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install radon xenon

    - name: Calculate code metrics
      run: |
        echo "## Code Complexity Metrics" >> metrics.md
        echo "### Cyclomatic Complexity" >> metrics.md
        radon cc . --show-complexity --min=B >> metrics.md
        echo "### Maintainability Index" >> metrics.md
        radon mi . --show >> metrics.md
        echo "### Halstead Metrics" >> metrics.md  
        radon hal . >> metrics.md

    - name: Upload metrics
      uses: actions/upload-artifact@v3
      with:
        name: code-metrics
        path: metrics.md