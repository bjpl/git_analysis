name: 🧪 Test Suite\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n  workflow_dispatch:\n\nenv:\n  NODE_VERSION: '18'\n  CACHE_VERSION: v1\n\njobs:\n  # Unit and Integration Tests\n  unit-tests:\n    name: 🔬 Unit & Integration Tests\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 📦 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: |\n          npm ci\n          npx playwright install --with-deps\n\n      - name: 🔧 Setup environment variables\n        run: |\n          echo \"VITE_SUPABASE_URL=https://test.supabase.co\" >> $GITHUB_ENV\n          echo \"VITE_SUPABASE_ANON_KEY=test-anon-key\" >> $GITHUB_ENV\n          echo \"VITE_UNSPLASH_ACCESS_KEY=test-unsplash-key\" >> $GITHUB_ENV\n\n      - name: 🧪 Run unit tests\n        run: npm run test:unit\n\n      - name: 🧪 Run integration tests  \n        run: npm run test:integration\n\n      - name: 📊 Generate coverage report\n        run: npm run test:coverage\n\n      - name: 📈 Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/lcov.info\n          flags: unittests\n          name: codecov-umbrella\n          fail_ci_if_error: false\n\n      - name: 💾 Cache test results\n        uses: actions/cache@v3\n        with:\n          path: |\n            coverage/\n            test-results/\n          key: test-results-${{ env.CACHE_VERSION }}-${{ github.sha }}\n          restore-keys: |\n            test-results-${{ env.CACHE_VERSION }}-\n\n  # End-to-End Tests\n  e2e-tests:\n    name: 🎭 E2E Tests\n    runs-on: ubuntu-latest\n    needs: unit-tests\n    \n    strategy:\n      matrix:\n        browser: [chromium, firefox, webkit]\n        \n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 📦 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: |\n          npm ci\n          npx playwright install --with-deps ${{ matrix.browser }}\n\n      - name: 🔧 Setup environment variables\n        run: |\n          echo \"VITE_SUPABASE_URL=https://test.supabase.co\" >> $GITHUB_ENV\n          echo \"VITE_SUPABASE_ANON_KEY=test-anon-key\" >> $GITHUB_ENV\n          echo \"VITE_UNSPLASH_ACCESS_KEY=test-unsplash-key\" >> $GITHUB_ENV\n\n      - name: 🏗️ Build application\n        run: npm run build\n\n      - name: 🎭 Run E2E tests\n        run: npx playwright test --project=${{ matrix.browser }}\n        env:\n          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}\n\n      - name: 📸 Upload test artifacts\n        uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: playwright-report-${{ matrix.browser }}\n          path: |\n            playwright-report/\n            test-results/\n          retention-days: 30\n\n  # Mobile E2E Tests\n  mobile-e2e-tests:\n    name: 📱 Mobile E2E Tests\n    runs-on: ubuntu-latest\n    needs: unit-tests\n    \n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 📦 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: |\n          npm ci\n          npx playwright install --with-deps chromium\n\n      - name: 🔧 Setup environment variables\n        run: |\n          echo \"VITE_SUPABASE_URL=https://test.supabase.co\" >> $GITHUB_ENV\n          echo \"VITE_SUPABASE_ANON_KEY=test-anon-key\" >> $GITHUB_ENV\n          echo \"VITE_UNSPLASH_ACCESS_KEY=test-unsplash-key\" >> $GITHUB_ENV\n\n      - name: 🏗️ Build application\n        run: npm run build\n\n      - name: 📱 Run mobile E2E tests\n        run: npx playwright test --project=\"Mobile Chrome\" --project=\"Mobile Safari\"\n\n      - name: 📸 Upload mobile test artifacts\n        uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: playwright-report-mobile\n          path: |\n            playwright-report/\n            test-results/\n          retention-days: 30\n\n  # Performance Tests\n  performance-tests:\n    name: ⚡ Performance Tests\n    runs-on: ubuntu-latest\n    needs: unit-tests\n    \n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 📦 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: npm ci\n\n      - name: 🏗️ Build application\n        run: npm run build\n        env:\n          VITE_SUPABASE_URL: https://test.supabase.co\n          VITE_SUPABASE_ANON_KEY: test-anon-key\n          VITE_UNSPLASH_ACCESS_KEY: test-unsplash-key\n\n      - name: ⚡ Run Lighthouse CI\n        run: |\n          npm install -g @lhci/cli\n          lhci autorun\n        env:\n          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}\n\n      - name: 📊 Upload Lighthouse results\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: lighthouse-results\n          path: |\n            .lighthouseci/\n            lighthouse-results.json\n          retention-days: 30\n\n  # Accessibility Tests\n  accessibility-tests:\n    name: ♿ Accessibility Tests\n    runs-on: ubuntu-latest\n    needs: unit-tests\n    \n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 📦 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: |\n          npm ci\n          npx playwright install --with-deps chromium\n\n      - name: 🏗️ Build application\n        run: npm run build\n\n      - name: ♿ Run accessibility tests\n        run: npx playwright test --project=accessibility\n\n      - name: 📸 Upload accessibility test results\n        uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: accessibility-report\n          path: |\n            playwright-report/\n            test-results/\n          retention-days: 30\n\n  # Security Tests\n  security-tests:\n    name: 🔒 Security Tests\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: 📥 Checkout code\n        uses: actions/checkout@v4\n\n      - name: 📦 Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: 📦 Install dependencies\n        run: npm ci\n\n      - name: 🔍 Run npm audit\n        run: npm audit --audit-level=high\n        continue-on-error: true\n\n      - name: 🔒 Run CodeQL analysis\n        uses: github/codeql-action/init@v2\n        with:\n          languages: typescript, javascript\n\n      - name: 🏗️ Build application\n        run: npm run build\n\n      - name: 🔒 Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v2\n\n  # Test Summary\n  test-summary:\n    name: 📋 Test Summary\n    runs-on: ubuntu-latest\n    needs: [unit-tests, e2e-tests, mobile-e2e-tests, performance-tests, accessibility-tests, security-tests]\n    if: always()\n    \n    steps:\n      - name: 📥 Download test artifacts\n        uses: actions/download-artifact@v3\n        with:\n          path: test-artifacts\n\n      - name: 📊 Generate test summary\n        run: |\n          echo \"## 🧪 Test Results Summary\" >> $GITHUB_STEP_SUMMARY\n          echo \"\" >> $GITHUB_STEP_SUMMARY\n          echo \"| Test Type | Status |\" >> $GITHUB_STEP_SUMMARY\n          echo \"|-----------|--------|\" >> $GITHUB_STEP_SUMMARY\n          echo \"| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |\" >> $GITHUB_STEP_SUMMARY\n          echo \"| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |\" >> $GITHUB_STEP_SUMMARY\n          echo \"| Mobile Tests | ${{ needs.mobile-e2e-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |\" >> $GITHUB_STEP_SUMMARY\n          echo \"| Performance | ${{ needs.performance-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |\" >> $GITHUB_STEP_SUMMARY\n          echo \"| Accessibility | ${{ needs.accessibility-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |\" >> $GITHUB_STEP_SUMMARY\n          echo \"| Security | ${{ needs.security-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |\" >> $GITHUB_STEP_SUMMARY\n          echo \"\" >> $GITHUB_STEP_SUMMARY\n          echo \"### 📈 Coverage and Reports\" >> $GITHUB_STEP_SUMMARY\n          echo \"- [Coverage Report](https://codecov.io/gh/${{ github.repository }})\" >> $GITHUB_STEP_SUMMARY\n          echo \"- [Playwright Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\" >> $GITHUB_STEP_SUMMARY\n          echo \"- [Performance Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\" >> $GITHUB_STEP_SUMMARY\n\n      - name: 🎉 All tests passed\n        if: needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.mobile-e2e-tests.result == 'success' && needs.performance-tests.result == 'success' && needs.accessibility-tests.result == 'success' && needs.security-tests.result == 'success'\n        run: echo \"🎉 All tests passed! Ready for deployment.\"\n\n      - name: ❌ Some tests failed\n        if: needs.unit-tests.result != 'success' || needs.e2e-tests.result != 'success' || needs.mobile-e2e-tests.result != 'success' || needs.performance-tests.result != 'success' || needs.accessibility-tests.result != 'success' || needs.security-tests.result != 'success'\n        run: |\n          echo \"❌ Some tests failed. Please check the logs and fix the issues.\"\n          exit 1"